//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BarcodePcApp.barcode
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BarcodeServiceSoap11Binding", Namespace = "http://ws.cfport")]
    public partial class BarcodeService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GetOrgtradForInventoryOperationCompleted;

        private System.Threading.SendOrPostCallback BarcodeLoginOperationCompleted;

        private System.Threading.SendOrPostCallback CheckInKpinventoryOperationCompleted;

        private System.Threading.SendOrPostCallback GetPropNameStringOperationCompleted;

        private System.Threading.SendOrPostCallback GetQualityOperationCompleted;

        private System.Threading.SendOrPostCallback GetInventoryOrgStatusOperationCompleted;

        private System.Threading.SendOrPostCallback SaveNewCommentOperationCompleted;

        private System.Threading.SendOrPostCallback GetLocationWithBarcodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgarIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetRoomsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckDuplicateOperationCompleted;

        private System.Threading.SendOrPostCallback SetBerFlaggOperationCompleted;

        private System.Threading.SendOrPostCallback GetLocationBarcodeOperationCompleted;

        private System.Threading.SendOrPostCallback TakeInventoryOperationCompleted;

        private System.Threading.SendOrPostCallback GetReleaseProductsOperationCompleted;

        private System.Threading.SendOrPostCallback GetRoom_CabinetOperationCompleted;

        private System.Threading.SendOrPostCallback GetProdProperties2OperationCompleted;

        private System.Threading.SendOrPostCallback CheckOutAQBarCodeOperationCompleted;

        private System.Threading.SendOrPostCallback FindProductOperationCompleted;

        private System.Threading.SendOrPostCallback GetInvtransIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetArOperationCompleted;

        private System.Threading.SendOrPostCallback GetPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateKpinvtransOperationCompleted;

        private System.Threading.SendOrPostCallback GetParentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetStorageParentOperationCompleted;

        private System.Threading.SendOrPostCallback InsertArticleOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderListOperationCompleted;

        private System.Threading.SendOrPostCallback CheckInAQBarCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetStorageOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllProductsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPropertyNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetInventoryListOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserOrgnodOperationCompleted;

        private System.Threading.SendOrPostCallback GetProductPropertyNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgtradOperationCompleted;

        private System.Threading.SendOrPostCallback GetNotStartedOrgOperationCompleted;

        private System.Threading.SendOrPostCallback NOT_KpinvtransOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgarCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetProdSupplierTextOperationCompleted;

        private System.Threading.SendOrPostCallback GetInventoryStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetPropIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgarOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgnamnOperationCompleted;

        private System.Threading.SendOrPostCallback OrderCheckOutOperationCompleted;

        private System.Threading.SendOrPostCallback GetInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetStorageParentCheckOperationCompleted;

        private System.Threading.SendOrPostCallback GetPrintingListOperationCompleted;

        private System.Threading.SendOrPostCallback ReleaseRulesOperationCompleted;

        private System.Threading.SendOrPostCallback GetProdSupplierOperationCompleted;

        private System.Threading.SendOrPostCallback CheckIfBarcodeExistsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPrintBFOperationCompleted;

        private System.Threading.SendOrPostCallback FinnsProdOperationCompleted;

        private System.Threading.SendOrPostCallback InsertProdSupplierOperationCompleted;

        private System.Threading.SendOrPostCallback GetCheckedInProdOperationCompleted;

        private System.Threading.SendOrPostCallback GetDBsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckIfOrangeOperationCompleted;

        private System.Threading.SendOrPostCallback GetStorageNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;

        private System.Threading.SendOrPostCallback SaveLoginBarcodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetPropNameOperationCompleted;

        private System.Threading.SendOrPostCallback ProductPropertyOperationCompleted;

        private System.Threading.SendOrPostCallback GetUnitOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateKpinvStatusOperationCompleted;

        private System.Threading.SendOrPostCallback AvanceradNivaOperationCompleted;

        private System.Threading.SendOrPostCallback LokFastOperationCompleted;

        private System.Threading.SendOrPostCallback OrderDeleterowOperationCompleted;

        private System.Threading.SendOrPostCallback FinnsMolstruktOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderOperationCompleted;

        private System.Threading.SendOrPostCallback GetArtNrOperationCompleted;

        private System.Threading.SendOrPostCallback TransferArticleOperationCompleted;

        private System.Threading.SendOrPostCallback GetLoginBarcodeOperationCompleted;

        private System.Threading.SendOrPostCallback CheckOutKpinvTransOperationCompleted;

        private System.Threading.SendOrPostCallback AssignBarcodeOperationCompleted;

        private System.Threading.SendOrPostCallback NollstallAvdOperationCompleted;

        private System.Threading.SendOrPostCallback SokProdOperationCompleted;
        private System.Threading.SendOrPostCallback CheckLocationBarcodeOperationCompleted;
        private System.Threading.SendOrPostCallback CheckLoggOperationCompleted;
        private System.Threading.SendOrPostCallback GetCountriesOperationCompleted;
        private System.Threading.SendOrPostCallback ImportLandRegelOperationCompleted;
        private System.Threading.SendOrPostCallback GetRoomPropOperationCompleted;
        private System.Threading.SendOrPostCallback GetInventoryCabinetsOperationCompleted;
        private System.Threading.SendOrPostCallback GetUserNameAndPasswordWithBarcodeOperationCompleted;
        private System.Threading.SendOrPostCallback GetPcAppInstOperationCompleted;
        private System.Threading.SendOrPostCallback MoveToPapperskorgOperationCompleted;
        private System.Threading.SendOrPostCallback GetStorageNameOverviewOperationCompleted;
        private System.Threading.SendOrPostCallback GetNewVersionOperationCompleted;
        private System.Threading.SendOrPostCallback GetAvdOperationCompleted;


        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public BarcodeService()
        {
            this.Url = global::BarcodePcApp.Properties.Settings.Default.BarcodePcApp_barcode_BarcodeService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetOrgtradForInventoryCompletedEventHandler GetOrgtradForInventoryCompleted;

        /// <remarks/>
        public event BarcodeLoginCompletedEventHandler BarcodeLoginCompleted;

        /// <remarks/>
        public event CheckInKpinventoryCompletedEventHandler CheckInKpinventoryCompleted;

        /// <remarks/>
        public event GetPropNameStringCompletedEventHandler GetPropNameStringCompleted;

        /// <remarks/>
        public event GetQualityCompletedEventHandler GetQualityCompleted;

        /// <remarks/>
        public event GetInventoryOrgStatusCompletedEventHandler GetInventoryOrgStatusCompleted;

        /// <remarks/>
        public event SaveNewCommentCompletedEventHandler SaveNewCommentCompleted;

        /// <remarks/>
        public event GetLocationWithBarcodeCompletedEventHandler GetLocationWithBarcodeCompleted;

        /// <remarks/>
        public event GetOrgarIDCompletedEventHandler GetOrgarIDCompleted;

        /// <remarks/>
        public event GetRoomsCompletedEventHandler GetRoomsCompleted;

        /// <remarks/>
        public event CheckDuplicateCompletedEventHandler CheckDuplicateCompleted;

        /// <remarks/>
        public event SetBerFlaggCompletedEventHandler SetBerFlaggCompleted;

        /// <remarks/>
        public event GetLocationBarcodeCompletedEventHandler GetLocationBarcodeCompleted;

        /// <remarks/>
        public event TakeInventoryCompletedEventHandler TakeInventoryCompleted;

        /// <remarks/>
        public event GetReleaseProductsCompletedEventHandler GetReleaseProductsCompleted;

        /// <remarks/>
        public event GetRoom_CabinetCompletedEventHandler GetRoom_CabinetCompleted;

        /// <remarks/>
        public event GetProdProperties2CompletedEventHandler GetProdProperties2Completed;

        /// <remarks/>
        public event CheckOutAQBarCodeCompletedEventHandler CheckOutAQBarCodeCompleted;

        /// <remarks/>
        public event FindProductCompletedEventHandler FindProductCompleted;

        /// <remarks/>
        public event GetInvtransIDCompletedEventHandler GetInvtransIDCompleted;

        /// <remarks/>
        public event GetArCompletedEventHandler GetArCompleted;

        /// <remarks/>
        public event GetPropertiesCompletedEventHandler GetPropertiesCompleted;

        /// <remarks/>
        public event UpdateKpinvtransCompletedEventHandler UpdateKpinvtransCompleted;

        /// <remarks/>
        public event GetParentsCompletedEventHandler GetParentsCompleted;

        /// <remarks/>
        public event GetStorageParentCompletedEventHandler GetStorageParentCompleted;

        /// <remarks/>
        public event InsertArticleCompletedEventHandler InsertArticleCompleted;

        /// <remarks/>
        public event GetOrderListCompletedEventHandler GetOrderListCompleted;

        /// <remarks/>
        public event CheckInAQBarCodeCompletedEventHandler CheckInAQBarCodeCompleted;

        /// <remarks/>
        public event GetStorageCompletedEventHandler GetStorageCompleted;

        /// <remarks/>
        public event GetAllProductsCompletedEventHandler GetAllProductsCompleted;

        /// <remarks/>
        public event GetPropertyNameCompletedEventHandler GetPropertyNameCompleted;

        /// <remarks/>
        public event GetInventoryListCompletedEventHandler GetInventoryListCompleted;

        /// <remarks/>
        public event GetUserOrgnodCompletedEventHandler GetUserOrgnodCompleted;

        /// <remarks/>
        public event GetProductPropertyNameCompletedEventHandler GetProductPropertyNameCompleted;

        /// <remarks/>
        public event GetOrgtradCompletedEventHandler GetOrgtradCompleted;

        /// <remarks/>
        public event GetNotStartedOrgCompletedEventHandler GetNotStartedOrgCompleted;

        /// <remarks/>
        public event NOT_KpinvtransCompletedEventHandler NOT_KpinvtransCompleted;

        /// <remarks/>
        public event GetOrgarCodeCompletedEventHandler GetOrgarCodeCompleted;

        /// <remarks/>
        public event GetProdSupplierTextCompletedEventHandler GetProdSupplierTextCompleted;

        /// <remarks/>
        public event GetInventoryStatusCompletedEventHandler GetInventoryStatusCompleted;

        /// <remarks/>
        public event GetPropIDCompletedEventHandler GetPropIDCompleted;

        /// <remarks/>
        public event GetOrgarCompletedEventHandler GetOrgarCompleted;

        /// <remarks/>
        public event GetOrgnamnCompletedEventHandler GetOrgnamnCompleted;

        /// <remarks/>
        public event OrderCheckOutCompletedEventHandler OrderCheckOutCompleted;

        /// <remarks/>
        public event GetInfoCompletedEventHandler GetInfoCompleted;

        /// <remarks/>
        public event GetStorageParentCheckCompletedEventHandler GetStorageParentCheckCompleted;

        /// <remarks/>
        public event GetPrintingListCompletedEventHandler GetPrintingListCompleted;

        /// <remarks/>
        public event ReleaseRulesCompletedEventHandler ReleaseRulesCompleted;

        /// <remarks/>
        public event GetProdSupplierCompletedEventHandler GetProdSupplierCompleted;

        /// <remarks/>
        public event CheckIfBarcodeExistsCompletedEventHandler CheckIfBarcodeExistsCompleted;

        /// <remarks/>
        public event GetPrintBFCompletedEventHandler GetPrintBFCompleted;

        /// <remarks/>
        public event FinnsProdCompletedEventHandler FinnsProdCompleted;

        /// <remarks/>
        public event InsertProdSupplierCompletedEventHandler InsertProdSupplierCompleted;

        /// <remarks/>
        public event GetCheckedInProdCompletedEventHandler GetCheckedInProdCompleted;

        /// <remarks/>
        public event GetDBsCompletedEventHandler GetDBsCompleted;

        /// <remarks/>
        public event CheckIfOrangeCompletedEventHandler CheckIfOrangeCompleted;

        /// <remarks/>
        public event GetStorageNameCompletedEventHandler GetStorageNameCompleted;

        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;

        /// <remarks/>
        public event GetAvdCompletedEventHandler GetAvdCompleted;

        /// <remarks/>
        public event GetRoomPropCompletedEventHandler GetRoomPropCompleted;

        /// <remarks/>
        public event GetInventoryCabinetsCompletedEventHandler GetInventoryCabinetsCompleted;

        /// <remarks/>
        public event GetUserNameAndPasswordWithBarcodeCompletedEventHandler GetUserNameAndPasswordWithBarcodeCompleted;

        /// <remarks/>
        public event GetPcAppInstCompletedEventHandler GetPcAppInstCompleted;

        /// <remarks/>
        public event MoveToPapperskorgCompletedEventHandler MoveToPapperskorgCompleted;

        /// <remarks/>
        public event GetStorageNameOverviewCompletedEventHandler GetStorageNameOverviewCompleted;

        /// <remarks/>
        public event SaveLoginBarcodeCompletedEventHandler SaveLoginBarcodeCompleted;

        /// <remarks/>
        public event GetPropNameCompletedEventHandler GetPropNameCompleted;

        /// <remarks/>
        public event ProductPropertyCompletedEventHandler ProductPropertyCompleted;

        /// <remarks/>
        public event GetUnitCompletedEventHandler GetUnitCompleted;

        /// <remarks/>
        public event UpdateKpinvStatusCompletedEventHandler UpdateKpinvStatusCompleted;

        /// <remarks/>
        public event AvanceradNivaCompletedEventHandler AvanceradNivaCompleted;

        /// <remarks/>
        public event LokFastCompletedEventHandler LokFastCompleted;

        /// <remarks/>
        public event OrderDeleterowCompletedEventHandler OrderDeleterowCompleted;

        /// <remarks/>
        public event FinnsMolstruktCompletedEventHandler FinnsMolstruktCompleted;

        /// <remarks/>
        public event GetOrderCompletedEventHandler GetOrderCompleted;

        /// <remarks/>
        public event GetArtNrCompletedEventHandler GetArtNrCompleted;

        /// <remarks/>
        public event TransferArticleCompletedEventHandler TransferArticleCompleted;

        /// <remarks/>
        public event GetLoginBarcodeCompletedEventHandler GetLoginBarcodeCompleted;

        /// <remarks/>
        public event CheckOutKpinvTransCompletedEventHandler CheckOutKpinvTransCompleted;

        /// <remarks/>
        public event AssignBarcodeCompletedEventHandler AssignBarcodeCompleted;

        /// <remarks/>
        public event NollstallAvdCompletedEventHandler NollstallAvdCompleted;


        /// <remarks/>
        public event CheckLocationBarcodeCompletedEventHandler CheckLocationBarcodeCompleted;

        /// <remarks/>
        public event CheckLoggCompletedEventHandler CheckLoggCompleted;

        /// <remarks/>
        public event SokProdCompletedEventHandler SokProdCompleted;

        /// <remarks/>
        public event GetCountriesCompletedEventHandler GetCountriesCompleted;

        /// <remarks/>
        public event ImportLandRegelCompletedEventHandler ImportLandRegelCompleted;

        /// <remarks/>
        public event GetNewVersionCompletedEventHandler GetNewVersionCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgtradForInventory", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgtradForInventory([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double aktar, double userid, double orgar, double orgid)
        {
            object[] results = this.Invoke("GetOrgtradForInventory", new object[] {
                        databas,
                        aktar,
                        userid,
                        orgar,
                        orgid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgtradForInventoryAsync(string databas, double aktar, double userid, double orgar, double orgid)
        {
            this.GetOrgtradForInventoryAsync(databas, aktar, userid, orgar, orgid);
        }

        /// <remarks/>
        public void GetOrgtradForInventoryAsync(string databas, double aktar, double userid, double orgar, double orgid, object userState)
        {
            if ((this.GetOrgtradForInventoryOperationCompleted == null))
            {
                this.GetOrgtradForInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgtradForInventoryOperationCompleted);
            }
            this.InvokeAsync("GetOrgtradForInventory", new object[] {
                        databas,
                        aktar,
                        userid,
                        orgar,
                        orgid
                        }, this.GetOrgtradForInventoryOperationCompleted, userState);
        }

        private void OnGetOrgtradForInventoryOperationCompleted(object arg)
        {
            if ((this.GetOrgtradForInventoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgtradForInventoryCompleted(this, new GetOrgtradForInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:BarcodeLogin", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string BarcodeLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod)
        {
            object[] results = this.Invoke("BarcodeLogin", new object[] {
                        databas,
                        username,
                        password,
                        streckkod});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void BarcodeLoginAsync(string databas, string username, string password, string streckkod)
        {
            this.BarcodeLoginAsync(databas, username, password, streckkod, null);
        }

        /// <remarks/>
        public void BarcodeLoginAsync(string databas, string username, string password, string streckkod, object userState)
        {
            if ((this.BarcodeLoginOperationCompleted == null))
            {
                this.BarcodeLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBarcodeLoginOperationCompleted);
            }
            this.InvokeAsync("BarcodeLogin", new object[] {
                        databas,
                        username,
                        password,
                        streckkod}, this.BarcodeLoginOperationCompleted, userState);
        }

        private void OnBarcodeLoginOperationCompleted(object arg)
        {
            if ((this.BarcodeLoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BarcodeLoginCompleted(this, new BarcodeLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckInKpinventory", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckInKpinventory(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string urspdb,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb,
                    double urspverkid,
                    double urspusrid,
                    double prodid,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string produkt,
                    double orgnod,
                    double lokalid,
                    double storageid,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string anvnamn,
                    double enhet,
                    double streckkodsid,
                    double mangd,
                    double huvudenhet,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string comment,
                    double tubes,
                    double levid,
                    double egenskapid,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string batchno,
                    double bastbefore,
                    double artid,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string release,
                    double importland)
        {
            object[] results = this.Invoke("CheckInKpinventory", new object[] {
                        kemiDb,
                        urspdb,
                        lokaldb,
                        urspverkid,
                        urspusrid,
                        prodid,
                        produkt,
                        orgnod,
                         lokalid,
                        storageid,
                        anvnamn,
                        enhet,
                        streckkodsid,
                        mangd,
                         huvudenhet,
                        streckkod,
                        comment,
                        tubes,
                        levid,
                        egenskapid,
                        batchno,
                        bastbefore,
                        artid,
                        release,
            importland});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckInKpinventoryAsync(
                    string kemiDb,
                    string urspdb,
                    string lokaldb,
                    double urspverkid,
                    double urspusrid,
                    double prodid,
                    string produkt,
                    double orgnod,
                    double lokalid,
                    double storageid,
                    string anvnamn,
                    double enhet,
                    double streckkodsid,
                    double mangd,
                    double huvudenhet,
                    string streckkod,
                    string comment,
                    double tubes,
                    double levid,
                    double egenskapid,
                    string batchno,
                    double bastbefore,
                    double artid,
                    string release,
                    double importland)
        {
            this.CheckInKpinventoryAsync(kemiDb, urspdb, lokaldb, urspverkid, urspusrid, prodid, produkt, orgnod, lokalid, storageid, anvnamn, enhet, streckkodsid, mangd, huvudenhet, streckkod, comment, tubes, levid, egenskapid, batchno, bastbefore, artid, release, importland);
        }

        /// <remarks/>
        public void CheckInKpinventoryAsync(
                    string kemiDb,
                    string urspdb,
                    string lokaldb,
                    double urspverkid,
                    double urspusrid,
                    double prodid,
                    string produkt,
                    double orgnod,
                    double lokalid,
                    double storageid,
                    string anvnamn,
                    double enhet,
                    double streckkodsid,
                    double mangd,
                    double huvudenhet,
                    string streckkod,
                    string comment,
                    double tubes,
                    double levid,
                    double egenskapid,
                    string batchno,
                    double bastbefore,
                    double artid,
                    string release,
                    double importland,
                    object userState)
        {
            if ((this.CheckInKpinventoryOperationCompleted == null))
            {
                this.CheckInKpinventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInKpinventoryOperationCompleted);
            }
            this.InvokeAsync("CheckInKpinventory", new object[] {
                        kemiDb,
                        urspdb,
                        lokaldb,
                        urspverkid,
                        urspusrid,
                        prodid,
                        produkt,
                        orgnod,
                        lokalid,
                        storageid,
                        anvnamn,
                        enhet,
                        streckkodsid,
                        mangd,
                        huvudenhet,
                        streckkod,
                        comment,
                        tubes,
                        levid,
                        egenskapid,
                        batchno,
                        bastbefore,
                        artid,
                        release,
            importland}, this.CheckInKpinventoryOperationCompleted, userState);
        }

        private void OnCheckInKpinventoryOperationCompleted(object arg)
        {
            if ((this.CheckInKpinventoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInKpinventoryCompleted(this, new CheckInKpinventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPropNameString", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPropNameString([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalID, double cabinetID)
        {
            object[] results = this.Invoke("GetPropNameString", new object[] {
                        databas,
                        lokalID,
                        cabinetID
            });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPropNameStringAsync(string databas, double lokalID, double cabinetID)
        {
            this.GetPropNameStringAsync(databas, lokalID, cabinetID);
        }

        /// <remarks/>
        public void GetPropNameStringAsync(string databas, double lokalID, double cabinetID, object userState)
        {
            if ((this.GetPropNameStringOperationCompleted == null))
            {
                this.GetPropNameStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropNameStringOperationCompleted);
            }
            this.InvokeAsync("GetPropNameString", new object[] {
                        databas,
                        lokalID,
                        cabinetID
                        }, this.GetPropNameStringOperationCompleted, userState);
        }

        private void OnGetPropNameStringOperationCompleted(object arg)
        {
            if ((this.GetPropNameStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropNameStringCompleted(this, new GetPropNameStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetQuality", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetQuality([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas)
        {
            object[] results = this.Invoke("GetQuality", new object[] {
                        kemdatabas});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetQualityAsync(string kemdatabas)
        {
            this.GetQualityAsync(kemdatabas, null);
        }

        /// <remarks/>
        public void GetQualityAsync(string kemdatabas, object userState)
        {
            if ((this.GetQualityOperationCompleted == null))
            {
                this.GetQualityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQualityOperationCompleted);
            }
            this.InvokeAsync("GetQuality", new object[] {
                        kemdatabas}, this.GetQualityOperationCompleted, userState);
        }

        private void OnGetQualityOperationCompleted(object arg)
        {
            if ((this.GetQualityCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQualityCompleted(this, new GetQualityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInventoryOrgStatus", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInventoryOrgStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double invid, double orgar)
        {
            object[] results = this.Invoke("GetInventoryOrgStatus", new object[] {
                        databas,
                        orgid,
                        invid,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInventoryOrgStatusAsync(string databas, double orgid, double invid, double orgar)
        {
            this.GetInventoryOrgStatusAsync(databas, orgid, invid, orgar);
        }

        /// <remarks/>
        public void GetInventoryOrgStatusAsync(string databas, double orgid, double invid, double orgar, object userState)
        {
            if ((this.GetInventoryOrgStatusOperationCompleted == null))
            {
                this.GetInventoryOrgStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryOrgStatusOperationCompleted);
            }
            this.InvokeAsync("GetInventoryOrgStatus", new object[] {
                        databas,
                        orgid,
                        invid,
                        orgar
                        }, this.GetInventoryOrgStatusOperationCompleted, userState);
        }

        private void OnGetInventoryOrgStatusOperationCompleted(object arg)
        {
            if ((this.GetInventoryOrgStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryOrgStatusCompleted(this, new GetInventoryOrgStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:SaveNewComment", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string SaveNewComment([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string comment, double orgar)
        {
            object[] results = this.Invoke("SaveNewComment", new object[] {
                        databas,
                        lokaldb,
                        barcode,
                        comment,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SaveNewCommentAsync(string databas, string lokaldb, string barcode, string comment, double orgar)
        {
            this.SaveNewCommentAsync(databas, lokaldb, barcode, comment, orgar);
        }

        /// <remarks/>
        public void SaveNewCommentAsync(string databas, string lokaldb, string barcode, string comment, double orgar, object userState)
        {
            if ((this.SaveNewCommentOperationCompleted == null))
            {
                this.SaveNewCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewCommentOperationCompleted);
            }
            this.InvokeAsync("SaveNewComment", new object[] {
                        databas,
                        lokaldb,
                        barcode,
                        comment,
                        orgar
                        }, this.SaveNewCommentOperationCompleted, userState);
        }

        private void OnSaveNewCommentOperationCompleted(object arg)
        {
            if ((this.SaveNewCommentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewCommentCompleted(this, new SaveNewCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckLocationBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckLocationBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode)
        {
            object[] results = this.Invoke("CheckLocationBarcode", new object[] {
                        databas,
                        barcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckLocationBarcodeAsync(string databas, string barcode)
        {
            this.CheckLocationBarcodeAsync(databas, barcode);
        }

        /// <remarks/>
        public void CheckLocationBarcodeAsync(string databas, string barcode, object userState)
        {
            if ((this.CheckLocationBarcodeOperationCompleted == null))
            {
                this.CheckLocationBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLocationBarcodeOperationCompleted);
            }
            this.InvokeAsync("CheckLocationBarcode", new object[] {
                        databas,
                        barcode}, this.CheckLocationBarcodeOperationCompleted, userState);
        }

        private void OnCheckLocationBarcodeOperationCompleted(object arg)
        {
            if ((this.CheckLocationBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLocationBarcodeCompleted(this, new CheckLocationBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetLocationWithBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetLocationWithBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string BarCode)
        {
            object[] results = this.Invoke("GetLocationWithBarcode", new object[] {
                        databas,
                        BarCode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLocationWithBarcodeAsync(string databas, string BarCode)
        {
            this.GetLocationWithBarcodeAsync(databas, BarCode);
        }

        /// <remarks/>
        public void GetLocationWithBarcodeAsync(string databas, string BarCode, object userState)
        {
            if ((this.GetLocationWithBarcodeOperationCompleted == null))
            {
                this.GetLocationWithBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationWithBarcodeOperationCompleted);
            }
            this.InvokeAsync("GetLocationWithBarcode", new object[] {
                        databas,
                        BarCode}, this.GetLocationWithBarcodeOperationCompleted, userState);
        }

        private void OnGetLocationWithBarcodeOperationCompleted(object arg)
        {
            if ((this.GetLocationWithBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationWithBarcodeCompleted(this, new GetLocationWithBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgarID", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgarID([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid)
        {
            object[] results = this.Invoke("GetOrgarID", new object[] {
                        databas,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgarIDAsync(string databas, double verkid)
        {
            this.GetOrgarIDAsync(databas, verkid);
        }

        /// <remarks/>
        public void GetOrgarIDAsync(string databas, double verkid, object userState)
        {
            if ((this.GetOrgarIDOperationCompleted == null))
            {
                this.GetOrgarIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgarIDOperationCompleted);
            }
            this.InvokeAsync("GetOrgarID", new object[] {
                        databas,
                        verkid
            }, this.GetOrgarIDOperationCompleted, userState);
        }

        private void OnGetOrgarIDOperationCompleted(object arg)
        {
            if ((this.GetOrgarIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgarIDCompleted(this, new GetOrgarIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRooms", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetRooms([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid, double orgnod, double orgar)
        {
            object[] results = this.Invoke("GetRooms", new object[] {
                        databas,
                        verkid,
                        orgnod,
                        orgar});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetRoomsAsync(string databas, double verkid, double orgnod, double orgar)
        {
            this.GetRoomsAsync(databas, verkid, orgnod, orgar);
        }

        /// <remarks/>
        public void GetRoomsAsync(string databas, double verkid, double orgnod, double orgar, object userState)
        {
            if ((this.GetRoomsOperationCompleted == null))
            {
                this.GetRoomsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoomsOperationCompleted);
            }
            this.InvokeAsync("GetRooms", new object[] {
                        databas,
                        verkid,
                        orgnod,
                        orgar}, this.GetRoomsOperationCompleted, userState);
        }

        private void OnGetRoomsOperationCompleted(object arg)
        {
            if ((this.GetRoomsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoomsCompleted(this, new GetRoomsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckDuplicate", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckDuplicate([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod, double orgar)
        {
            object[] results = this.Invoke("CheckDuplicate", new object[] {
                        database,
                        streckkod,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckDuplicateAsync(string database, string streckkod, double orgar)
        {
            this.CheckDuplicateAsync(database, streckkod, orgar);
        }

        /// <remarks/>
        public void CheckDuplicateAsync(string database, string streckkod, double orgar, object userState)
        {
            if ((this.CheckDuplicateOperationCompleted == null))
            {
                this.CheckDuplicateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDuplicateOperationCompleted);
            }
            this.InvokeAsync("CheckDuplicate", new object[] {
                        database,
                        streckkod,
                        orgar
                        }, this.CheckDuplicateOperationCompleted, userState);
        }

        private void OnCheckDuplicateOperationCompleted(object arg)
        {
            if ((this.CheckDuplicateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDuplicateCompleted(this, new CheckDuplicateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ImportLandRegel", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string ImportLandRegel([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, double orgid, double orgar)
        {
            object[] results = this.Invoke("ImportLandRegel", new object[] {
                        databas,
                        kemidb,
                        orgid,
                        orgar});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ImportLandRegelAsync(string databas, string kemidb, double orgid, double orgar)
        {
            this.ImportLandRegelAsync(databas, kemidb, orgid, orgar);
        }

        /// <remarks/>
        public void ImportLandRegelAsync(string databas, string kemidb, double orgid, double orgar, object userState)
        {
            if ((this.ImportLandRegelOperationCompleted == null))
            {
                this.ImportLandRegelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportLandRegelOperationCompleted);
            }
            this.InvokeAsync("ImportLandRegel", new object[] {
                        databas,
                        kemidb,
                        orgid,
                        orgar}, this.ImportLandRegelOperationCompleted, userState);
        }

        private void OnImportLandRegelOperationCompleted(object arg)
        {
            if ((this.ImportLandRegelCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportLandRegelCompleted(this, new ImportLandRegelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:SetBerFlagg", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetBerFlagg([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orgar, out double @return)
        {
            object[] results = this.Invoke("SetBerFlagg", new object[] {
                        databas,
                        orgar});
            @return = ((double)(results[0]));
        }

        /// <remarks/>
        public void SetBerFlaggAsync(string databas, string orgar)
        {
            this.SetBerFlaggAsync(databas, orgar, null);
        }

        /// <remarks/>
        public void SetBerFlaggAsync(string databas, string orgar, object userState)
        {
            if ((this.SetBerFlaggOperationCompleted == null))
            {
                this.SetBerFlaggOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBerFlaggOperationCompleted);
            }
            this.InvokeAsync("SetBerFlagg", new object[] {
                        databas,
                        orgar}, this.SetBerFlaggOperationCompleted, userState);
        }

        private void OnSetBerFlaggOperationCompleted(object arg)
        {
            if ((this.SetBerFlaggCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBerFlaggCompleted(this, new SetBerFlaggCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetLocationBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetLocationBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double storageid, double type, double orgid)
        {
            object[] results = this.Invoke("GetLocationBarcode", new object[] {
                        databas,
                        storageid,
                           type,
                        orgid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLocationBarcodeAsync(string databas, double storageid, double type, double orgid)
        {
            this.GetLocationBarcodeAsync(databas, storageid, type, orgid);
        }

        /// <remarks/>
        public void GetLocationBarcodeAsync(string databas, double storageid, double type, double orgid, object userState)
        {
            if ((this.GetLocationBarcodeOperationCompleted == null))
            {
                this.GetLocationBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationBarcodeOperationCompleted);
            }
            this.InvokeAsync("GetLocationBarcode", new object[] {
                        databas,
                        storageid,
                        type,
                        orgid
                        }, this.GetLocationBarcodeOperationCompleted, userState);
        }

        private void OnGetLocationBarcodeOperationCompleted(object arg)
        {
            if ((this.GetLocationBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationBarcodeCompleted(this, new GetLocationBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:TakeInventory", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string TakeInventory([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string KpinvtransIDlist, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, double inventoryPeriod, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database)
        {
            object[] results = this.Invoke("TakeInventory", new object[] {
                        KpinvtransIDlist,
                        username,
                        inventoryPeriod,
                        database});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TakeInventoryAsync(string KpinvtransIDlist, string username, double inventoryPeriod, string database)
        {
            this.TakeInventoryAsync(KpinvtransIDlist, username, inventoryPeriod, database);
        }

        /// <remarks/>
        public void TakeInventoryAsync(string KpinvtransIDlist, string username, double inventoryPeriod, string database, object userState)
        {
            if ((this.TakeInventoryOperationCompleted == null))
            {
                this.TakeInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTakeInventoryOperationCompleted);
            }
            this.InvokeAsync("TakeInventory", new object[] {
                        KpinvtransIDlist,
                        username,
                        inventoryPeriod,
                        database}, this.TakeInventoryOperationCompleted, userState);
        }

        private void OnTakeInventoryOperationCompleted(object arg)
        {
            if ((this.TakeInventoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TakeInventoryCompleted(this, new TakeInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetReleaseProducts", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetReleaseProducts([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double userid, double orgid, double verkid)
        {
            object[] results = this.Invoke("GetReleaseProducts", new object[] {
                        databas,
                        kemiDb,
                        userid,
                        orgid,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetReleaseProductsAsync(string databas, string kemiDb, double userid, double orgid, double verkid)
        {
            this.GetReleaseProductsAsync(databas, kemiDb, userid, orgid, verkid);
        }

        /// <remarks/>
        public void GetReleaseProductsAsync(string databas, string kemiDb, double userid, double orgid, double verkid, object userState)
        {
            if ((this.GetReleaseProductsOperationCompleted == null))
            {
                this.GetReleaseProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleaseProductsOperationCompleted);
            }
            this.InvokeAsync("GetReleaseProducts", new object[] {
                        databas,
                        kemiDb,
                        userid,
                        orgid,
                        verkid
                        }, this.GetReleaseProductsOperationCompleted, userState);
        }

        private void OnGetReleaseProductsOperationCompleted(object arg)
        {
            if ((this.GetReleaseProductsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleaseProductsCompleted(this, new GetReleaseProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRoom_Cabinet", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetRoom_Cabinet([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string gemkemDb, double rowid, double lang)
        {
            object[] results = this.Invoke("GetRoom_Cabinet", new object[] {
                        databas,
                        gemkemDb,
                        rowid,
                        lang
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetRoom_CabinetAsync(string databas, string gemkemDb, double rowid, double langd)
        {
            this.GetRoom_CabinetAsync(databas, gemkemDb, rowid, langd);
        }

        /// <remarks/>
        public void GetRoom_CabinetAsync(string databas, string gemkemDb, double rowid, double lang, object userState)
        {
            if ((this.GetRoom_CabinetOperationCompleted == null))
            {
                this.GetRoom_CabinetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoom_CabinetOperationCompleted);
            }
            this.InvokeAsync("GetRoom_Cabinet", new object[] {
                        databas,
                        gemkemDb,
                        rowid,
                        lang
                        }, this.GetRoom_CabinetOperationCompleted, userState);
        }

        private void OnGetRoom_CabinetOperationCompleted(object arg)
        {
            if ((this.GetRoom_CabinetCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoom_CabinetCompleted(this, new GetRoom_CabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetProdProperties2", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetProdProperties2([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, double prodid)
        {
            object[] results = this.Invoke("GetProdProperties2", new object[] {
                        databas,
                        kemdatabas,
                        prodid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetProdProperties2Async(string databas, string kemdatabas, double prodid)
        {
            this.GetProdProperties2Async(databas, kemdatabas, prodid);
        }

        /// <remarks/>
        public void GetProdProperties2Async(string databas, string kemdatabas, double prodid, object userState)
        {
            if ((this.GetProdProperties2OperationCompleted == null))
            {
                this.GetProdProperties2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProdProperties2OperationCompleted);
            }
            this.InvokeAsync("GetProdProperties2", new object[] {
                        databas,
                        kemdatabas,
                        prodid
                        }, this.GetProdProperties2OperationCompleted, userState);
        }

        private void OnGetProdProperties2OperationCompleted(object arg)
        {
            if ((this.GetProdProperties2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProdProperties2Completed(this, new GetProdProperties2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckOutAQBarCode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckOutAQBarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string urspdb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod, out double @return)
        {
            object[] results = this.Invoke("CheckOutAQBarCode", new object[] {
                        kemiDb,
                        urspdb,
                        streckkod});
            @return = ((double)(results[0]));
        }

        /// <remarks/>
        public void CheckOutAQBarCodeAsync(string kemiDb, string urspdb, string streckkod)
        {
            this.CheckOutAQBarCodeAsync(kemiDb, urspdb, streckkod, null);
        }

        /// <remarks/>
        public void CheckOutAQBarCodeAsync(string kemiDb, string urspdb, string streckkod, object userState)
        {
            if ((this.CheckOutAQBarCodeOperationCompleted == null))
            {
                this.CheckOutAQBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutAQBarCodeOperationCompleted);
            }
            this.InvokeAsync("CheckOutAQBarCode", new object[] {
                        kemiDb,
                        urspdb,
                        streckkod}, this.CheckOutAQBarCodeOperationCompleted, userState);
        }

        private void OnCheckOutAQBarCodeOperationCompleted(object arg)
        {
            if ((this.CheckOutAQBarCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutAQBarCodeCompleted(this, new CheckOutAQBarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckLogg", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckLogg([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, string orgid)
        {
            object[] results = this.Invoke("CheckLogg", new object[] {
                        databas,
                        kemidb,
                        orgid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckLoggAsync(string databas, string kemidb, string orgid)
        {
            this.CheckLoggAsync(databas, kemidb, orgid);
        }

        /// <remarks/>
        public void CheckLoggAsync(string databas, string kemidb, string orgid, object userState)
        {
            if ((this.CheckLoggOperationCompleted == null))
            {
                this.CheckLoggOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoggOperationCompleted);
            }
            this.InvokeAsync("CheckLogg", new object[] {
                        databas,
                        kemidb,
                        orgid}, this.CheckLoggOperationCompleted, userState);
        }

        private void OnCheckLoggOperationCompleted(object arg)
        {
            if ((this.CheckLoggCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoggCompleted(this, new CheckLoggCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }



        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:FindProduct", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FindProduct([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double prodid, double verkid, double orgnod, out double @return)
        {
            object[] results = this.Invoke("FindProduct", new object[] {
                        kemidatabas,
                        databas,
                        prodid,
                        verkid,
                        orgnod
                        });
            @return = ((double)(results[0]));
        }

        /// <remarks/>
        public void FindProductAsync(string kemidatabas, string databas, double prodid, double verkid, double orgnod)
        {
            this.FindProductAsync(kemidatabas, databas, prodid, verkid, orgnod);
        }

        /// <remarks/>
        public void FindProductAsync(string kemidatabas, string databas, double prodid, double verkid, double orgnod, object userState)
        {
            if ((this.FindProductOperationCompleted == null))
            {
                this.FindProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindProductOperationCompleted);
            }
            this.InvokeAsync("FindProduct", new object[] {
                        kemidatabas,
                        databas,
                        prodid,
                        verkid,
                        orgnod
                        }, this.FindProductOperationCompleted, userState);
        }

        private void OnFindProductOperationCompleted(object arg)
        {
            if ((this.FindProductCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindProductCompleted(this, new FindProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInvtransID", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInvtransID([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas)
        {
            object[] results = this.Invoke("GetInvtransID", new object[] {
                        kemidatabas,
                        databas});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInvtransIDAsync(string kemidatabas, string databas)
        {
            this.GetInvtransIDAsync(kemidatabas, databas);
        }

        /// <remarks/>
        public void GetInvtransIDAsync(string kemidatabas, string databas, object userState)
        {
            if ((this.GetInvtransIDOperationCompleted == null))
            {
                this.GetInvtransIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvtransIDOperationCompleted);
            }
            this.InvokeAsync("GetInvtransID", new object[] {
                        kemidatabas,
                        databas}, this.GetInvtransIDOperationCompleted, userState);
        }

        private void OnGetInvtransIDOperationCompleted(object arg)
        {
            if ((this.GetInvtransIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvtransIDCompleted(this, new GetInvtransIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetAr", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetAr([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid)
        {
            object[] results = this.Invoke("GetAr", new object[] {
                        databas,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetArAsync(string databas, double verkid)
        {
            this.GetArAsync(databas, verkid);
        }

        /// <remarks/>
        public void GetArAsync(string databas, double verkid, object userState)
        {
            if ((this.GetArOperationCompleted == null))
            {
                this.GetArOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArOperationCompleted);
            }
            this.InvokeAsync("GetAr", new object[] {
                        databas,
                        verkid
                        }, this.GetArOperationCompleted, userState);
        }

        private void OnGetArOperationCompleted(object arg)
        {
            if ((this.GetArCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArCompleted(this, new GetArCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetProperties", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetProperties([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas)
        {
            object[] results = this.Invoke("GetProperties", new object[] {
                        databas,
                        kemdatabas});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPropertiesAsync(string databas, string kemdatabas)
        {
            this.GetPropertiesAsync(databas, kemdatabas);
        }

        /// <remarks/>
        public void GetPropertiesAsync(string databas, string kemdatabas, object userState)
        {
            if ((this.GetPropertiesOperationCompleted == null))
            {
                this.GetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetProperties", new object[] {
                        databas,
                        kemdatabas}, this.GetPropertiesOperationCompleted, userState);
        }

        private void OnGetPropertiesOperationCompleted(object arg)
        {
            if ((this.GetPropertiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertiesCompleted(this, new GetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:UpdateKpinvtrans", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string UpdateKpinvtrans([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transaktionsid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode, double user, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userstringname)
        {
            object[] results = this.Invoke("UpdateKpinvtrans", new object[] {
                        databas,
                        kemidb,
                        transaktionsid,
                        barcode,
                        user,
                        userstringname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateKpinvtransAsync(string databas, string kemidb, string transaktionsid, string barcode, double user, string userstringname)
        {
            this.UpdateKpinvtransAsync(databas, kemidb, transaktionsid, barcode, user, userstringname);
        }

        /// <remarks/>
        public void UpdateKpinvtransAsync(string databas, string kemidb, string transaktionsid, string barcode, double user, string userstringname, object userState)
        {
            if ((this.UpdateKpinvtransOperationCompleted == null))
            {
                this.UpdateKpinvtransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateKpinvtransOperationCompleted);
            }
            this.InvokeAsync("UpdateKpinvtrans", new object[] {
                        databas,
                        kemidb,
                        transaktionsid,
                        barcode,
                        user,
                        userstringname}, this.UpdateKpinvtransOperationCompleted, userState);
        }

        private void OnUpdateKpinvtransOperationCompleted(object arg)
        {
            if ((this.UpdateKpinvtransCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateKpinvtransCompleted(this, new UpdateKpinvtransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParents", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetParents(double orgnod, double roomID, double cabinetID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database, double ariklartext, double orgarcode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("GetParents", new object[] {
                        orgnod,
                        roomID,
                        cabinetID,
                        database,
                        ariklartext,
                        orgarcode,
                        lokaldb});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetParentsAsync(double orgnod, double roomID, double cabinetID, string database, double ariklartext, double orgarcode, string lokaldb)
        {
            this.GetParentsAsync(orgnod, roomID, cabinetID, database, ariklartext, orgarcode, lokaldb);
        }

        /// <remarks/>
        public void GetParentsAsync(double orgnod, double roomID, double cabinetID, string database, double ariklartext, double orgarcode, string lokaldb, object userState)
        {
            if ((this.GetParentsOperationCompleted == null))
            {
                this.GetParentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentsOperationCompleted);
            }
            this.InvokeAsync("GetParents", new object[] {
                        orgnod,
                        roomID,
                        cabinetID,
                        database,
                        ariklartext,
                        orgarcode,
                        lokaldb}, this.GetParentsOperationCompleted, userState);
        }

        private void OnGetParentsOperationCompleted(object arg)
        {
            if ((this.GetParentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentsCompleted(this, new GetParentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStorageParent", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetStorageParent([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalID, double storageID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("GetStorageParent", new object[] {
                        databas,
                        lokalID,
                        storageID,
                        lokaldb});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStorageParentAsync(string databas, double lokalID, double storageID, string lokaldb)
        {
            this.GetStorageParentAsync(databas, lokalID, storageID, lokaldb);
        }

        /// <remarks/>
        public void GetStorageParentAsync(string databas, double lokalID, double storageID, string lokaldb, object userState)
        {
            if ((this.GetStorageParentOperationCompleted == null))
            {
                this.GetStorageParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageParentOperationCompleted);
            }
            this.InvokeAsync("GetStorageParent", new object[] {
                        databas,
                        lokalID,
                        storageID,
                        lokaldb
                        }, this.GetStorageParentOperationCompleted, userState);
        }

        private void OnGetStorageParentOperationCompleted(object arg)
        {
            if ((this.GetStorageParentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageParentCompleted(this, new GetStorageParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:InsertArticle", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string InsertArticle([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double prodid, double levid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string art, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string packunit, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string quality, double packsize, double conc, double enhet)
        {
            object[] results = this.Invoke("InsertArticle", new object[] {
                        kemdatabas,
                        databas,
                        prodid,
                        levid,
                        art,
                        packunit,
                        quality,
                        packsize,
                        conc,
                        enhet
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertArticleAsync(string kemdatabas, string databas, double prodid, double levid, string art, string packunit, string quality, double packsize, double conc, double enhet)
        {
            this.InsertArticleAsync(kemdatabas, databas, prodid, levid, art, packunit, quality, packsize, conc, enhet);
        }

        /// <remarks/>
        public void InsertArticleAsync(
                    string kemdatabas,
                    string databas,
                    double prodid,
                    double levid,
                    string art,
                    string packunit,
                    string quality,
                    double packsize,
                    double conc,
                    double enhet,
                    object userState)
        {
            if ((this.InsertArticleOperationCompleted == null))
            {
                this.InsertArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertArticleOperationCompleted);
            }
            this.InvokeAsync("InsertArticle", new object[] {
                        kemdatabas,
                        databas,
                        prodid,
                        levid,
                        art,
                        packunit,
                        quality,
                        packsize,
                        conc,
                        enhet
                        }, this.InsertArticleOperationCompleted, userState);
        }

        private void OnInsertArticleOperationCompleted(object arg)
        {
            if ((this.InsertArticleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertArticleCompleted(this, new InsertArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrderList", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrderList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double userid, double aktar)
        {
            object[] results = this.Invoke("GetOrderList", new object[] {
                        kemiDb,
                        userid,
                        aktar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrderListAsync(string kemiDb, double userid, double aktar)
        {
            this.GetOrderListAsync(kemiDb, userid, aktar);
        }

        /// <remarks/>
        public void GetOrderListAsync(string kemiDb, double userid, double aktar, object userState)
        {
            if ((this.GetOrderListOperationCompleted == null))
            {
                this.GetOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderListOperationCompleted);
            }
            this.InvokeAsync("GetOrderList", new object[] {
                        kemiDb,
                        userid,
                        aktar
                        }, this.GetOrderListOperationCompleted, userState);
        }

        private void OnGetOrderListOperationCompleted(object arg)
        {
            if ((this.GetOrderListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderListCompleted(this, new GetOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckInAQBarCode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckInAQBarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string urspdb, double urspverkid, double urspusrid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string produkt, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkodstext, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string urspusrname, double mangd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string enhet, double antal, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string prefix)
        {
            object[] results = this.Invoke("CheckInAQBarCode", new object[] {
                        kemiDb,
                        urspdb,
                        urspverkid,
                        urspusrid,
                        produkt,
                        streckkodstext,
                        urspusrname,
                        mangd,
                        enhet,
                        antal,
                        prefix});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckInAQBarCodeAsync(string kemiDb, string urspdb, double urspverkid, double urspusrid, string produkt, string streckkodstext, string urspusrname, double mangd, string enhet, double antal, string prefix)
        {
            this.CheckInAQBarCodeAsync(kemiDb, urspdb, urspverkid, urspusrid, produkt, streckkodstext, urspusrname, mangd, enhet, antal, prefix, null);
        }

        /// <remarks/>
        public void CheckInAQBarCodeAsync(
                    string kemiDb,
                    string urspdb,
                    double urspverkid,
                    double urspusrid,
                    string produkt,
                    string streckkodstext,
                    string urspusrname,
                    double mangd,
                    string enhet,
                    double antal,
                      string prefix,
                    object userState)
        {
            if ((this.CheckInAQBarCodeOperationCompleted == null))
            {
                this.CheckInAQBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInAQBarCodeOperationCompleted);
            }
            this.InvokeAsync("CheckInAQBarCode", new object[] {
                        kemiDb,
                        urspdb,
                        urspverkid,
                        urspusrid,
                         produkt,
                        streckkodstext,
                        urspusrname,
                        mangd,
                        enhet,
                        antal,
                        prefix}, this.CheckInAQBarCodeOperationCompleted, userState);
        }

        private void OnCheckInAQBarCodeOperationCompleted(object arg)
        {
            if ((this.CheckInAQBarCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInAQBarCodeCompleted(this, new CheckInAQBarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStorage", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetStorage([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("GetStorage", new object[] {
                        databas,
                        lokalid,
                        lokaldb});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStorageAsync(string databas, double lokalid, string lokaldb)
        {
            this.GetStorageAsync(databas, lokalid, lokaldb);
        }

        /// <remarks/>
        public void GetStorageAsync(string databas, double lokalid, string lokaldb, object userState)
        {
            if ((this.GetStorageOperationCompleted == null))
            {
                this.GetStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageOperationCompleted);
            }
            this.InvokeAsync("GetStorage", new object[] {
                        databas,
                        lokalid,
                        lokaldb}, this.GetStorageOperationCompleted, userState);
        }

        private void OnGetStorageOperationCompleted(object arg)
        {
            if ((this.GetStorageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageCompleted(this, new GetStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetAllProducts", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetAllProducts([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string usersys, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string prefix, double sprak)
        {
            object[] results = this.Invoke("GetAllProducts", new object[] {
                        databas,
                        kemiDb,
                        userid,
                        username,
                        usersys,
                        prefix,
                        sprak       });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAllProductsAsync(string databas, string kemiDb, double userid, string username, string usersys, string prefix, double sprak)
        {
            this.GetAllProductsAsync(databas, kemiDb, userid, username, usersys, prefix, sprak);
        }

        /// <remarks/>
        public void GetAllProductsAsync(string databas, string kemiDb, double userid, string username, string usersys, string prefix, double sprak, object userState)
        {
            if ((this.GetAllProductsOperationCompleted == null))
            {
                this.GetAllProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllProductsOperationCompleted);
            }
            this.InvokeAsync("GetAllProducts", new object[] {
                        databas,
                        kemiDb,
                        userid,
                        username,
                        usersys,
                        prefix,
                        sprak}, this.GetAllProductsOperationCompleted, userState);
        }

        private void OnGetAllProductsOperationCompleted(object arg)
        {
            if ((this.GetAllProductsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllProductsCompleted(this, new GetAllProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPropertyName", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPropertyName([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double prodID)
        {
            object[] results = this.Invoke("GetPropertyName", new object[] {
                        databas,
                        prodID
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPropertyNameAsync(string databas, double prodID)
        {
            this.GetPropertyNameAsync(databas, prodID);
        }

        /// <remarks/>
        public void GetPropertyNameAsync(string databas, double prodID, object userState)
        {
            if ((this.GetPropertyNameOperationCompleted == null))
            {
                this.GetPropertyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyNameOperationCompleted);
            }
            this.InvokeAsync("GetPropertyName", new object[] {
                        databas,
                        prodID
                        }, this.GetPropertyNameOperationCompleted, userState);
        }

        private void OnGetPropertyNameOperationCompleted(object arg)
        {
            if ((this.GetPropertyNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyNameCompleted(this, new GetPropertyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInventoryList", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInventoryList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr)
        {
            object[] results = this.Invoke("GetInventoryList", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                        lokalID,
                        cabinetID,
                        orgAr
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInventoryListAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr)
        {
            this.GetInventoryListAsync(databas, kemdatabas, rumdatabas, orgID, lokalID, cabinetID, orgAr);
        }

        /// <remarks/>
        public void GetInventoryListAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr, object userState)
        {
            if ((this.GetInventoryListOperationCompleted == null))
            {
                this.GetInventoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryListOperationCompleted);
            }
            this.InvokeAsync("GetInventoryList", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                          lokalID,
                        cabinetID,
                        orgAr
                        }, this.GetInventoryListOperationCompleted, userState);
        }

        private void OnGetInventoryListOperationCompleted(object arg)
        {
            if ((this.GetInventoryListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryListCompleted(this, new GetInventoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetUserOrgnod", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetUserOrgnod([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgar, double userid, double kod)
        {
            object[] results = this.Invoke("GetUserOrgnod", new object[] {
                        databas,
                        orgar,
                        userid,
                        kod
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetUserOrgnodAsync(string databas, double orgar, double userid, double kod)
        {
            this.GetUserOrgnodAsync(databas, orgar, userid, kod);
        }

        /// <remarks/>
        public void GetUserOrgnodAsync(string databas, double orgar, double userid, double kod, object userState)
        {
            if ((this.GetUserOrgnodOperationCompleted == null))
            {
                this.GetUserOrgnodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOrgnodOperationCompleted);
            }
            this.InvokeAsync("GetUserOrgnod", new object[] {
                        databas,
                        orgar,
                         userid,
                         kod
                        }, this.GetUserOrgnodOperationCompleted, userState);
        }

        private void OnGetUserOrgnodOperationCompleted(object arg)
        {
            if ((this.GetUserOrgnodCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserOrgnodCompleted(this, new GetUserOrgnodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetProductPropertyName", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetProductPropertyName([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double transid)
        {
            object[] results = this.Invoke("GetProductPropertyName", new object[] {
                        databas,
                        transid
            });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetProductPropertyNameAsync(string databas, double transid)
        {
            this.GetProductPropertyNameAsync(databas, transid);
        }

        /// <remarks/>
        public void GetProductPropertyNameAsync(string databas, double transid, object userState)
        {
            if ((this.GetProductPropertyNameOperationCompleted == null))
            {
                this.GetProductPropertyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductPropertyNameOperationCompleted);
            }
            this.InvokeAsync("GetProductPropertyName", new object[] {
                        databas,
                        transid
                        }, this.GetProductPropertyNameOperationCompleted, userState);
        }

        private void OnGetProductPropertyNameOperationCompleted(object arg)
        {
            if ((this.GetProductPropertyNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductPropertyNameCompleted(this, new GetProductPropertyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgtrad", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgtrad([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double aktar, double userid)
        {
            object[] results = this.Invoke("GetOrgtrad", new object[] {
                        databas,
                        aktar,
                        userid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgtradAsync(string databas, double aktar, double userid)
        {
            this.GetOrgtradAsync(databas, aktar, userid);
        }

        /// <remarks/>
        public void GetOrgtradAsync(string databas, double aktar, double userid, object userState)
        {
            if ((this.GetOrgtradOperationCompleted == null))
            {
                this.GetOrgtradOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgtradOperationCompleted);
            }
            this.InvokeAsync("GetOrgtrad", new object[] {
                        databas,
                        aktar,
                        userid
                        }, this.GetOrgtradOperationCompleted, userState);
        }

        private void OnGetOrgtradOperationCompleted(object arg)
        {
            if ((this.GetOrgtradCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgtradCompleted(this, new GetOrgtradCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetNotStartedOrg", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetNotStartedOrg([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double verkid)
        {
            object[] results = this.Invoke("GetNotStartedOrg", new object[] {
                        databas,
                        orgid,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetNotStartedOrgAsync(string databas, double orgid, double verkid)
        {
            this.GetNotStartedOrgAsync(databas, orgid, verkid);
        }

        /// <remarks/>
        public void GetNotStartedOrgAsync(string databas, double orgid, double verkid, object userState)
        {
            if ((this.GetNotStartedOrgOperationCompleted == null))
            {
                this.GetNotStartedOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotStartedOrgOperationCompleted);
            }
            this.InvokeAsync("GetNotStartedOrg", new object[] {
                        databas,
                        orgid,
                        verkid
                        }, this.GetNotStartedOrgOperationCompleted, userState);
        }

        private void OnGetNotStartedOrgOperationCompleted(object arg)
        {
            if ((this.GetNotStartedOrgCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNotStartedOrgCompleted(this, new GetNotStartedOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:NOT_Kpinvtrans", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string NOT_Kpinvtrans([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transaktionsid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode, double user, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userstringname)
        {
            object[] results = this.Invoke("NOT_Kpinvtrans", new object[] {
                        databas,
                        kemidb,
                        transaktionsid,
                        barcode,
                        user,
                        userstringname});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void NOT_KpinvtransAsync(string databas, string kemidb, string transaktionsid, string barcode, double user, string userstringname)
        {
            this.NOT_KpinvtransAsync(databas, kemidb, transaktionsid, barcode, user, userstringname, null);
        }

        /// <remarks/>
        public void NOT_KpinvtransAsync(string databas, string kemidb, string transaktionsid, string barcode, double user, string userstringname, object userState)
        {
            if ((this.NOT_KpinvtransOperationCompleted == null))
            {
                this.NOT_KpinvtransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNOT_KpinvtransOperationCompleted);
            }
            this.InvokeAsync("NOT_Kpinvtrans", new object[] {
                        databas,
                        kemidb,
                        transaktionsid,
                        barcode,
                        user,
                        userstringname}, this.NOT_KpinvtransOperationCompleted, userState);
        }

        private void OnNOT_KpinvtransOperationCompleted(object arg)
        {
            if ((this.NOT_KpinvtransCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NOT_KpinvtransCompleted(this, new NOT_KpinvtransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgarCode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid)
        {
            object[] results = this.Invoke("GetOrgarCode", new object[] {
                        databas,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgarCodeAsync(string databas, double verkid)
        {
            this.GetOrgarCodeAsync(databas, verkid);
        }

        /// <remarks/>
        public void GetOrgarCodeAsync(string databas, double verkid, object userState)
        {
            if ((this.GetOrgarCodeOperationCompleted == null))
            {
                this.GetOrgarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgarCodeOperationCompleted);
            }
            this.InvokeAsync("GetOrgarCode", new object[] {
                        databas,
                        verkid
                        }, this.GetOrgarCodeOperationCompleted, userState);
        }

        private void OnGetOrgarCodeOperationCompleted(object arg)
        {
            if ((this.GetOrgarCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgarCodeCompleted(this, new GetOrgarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetProdSupplierText", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetProdSupplierText([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lev_text)
        {
            object[] results = this.Invoke("GetProdSupplierText", new object[] {
                        databas,
                        kemdatabas,
                        lev_text});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetProdSupplierTextAsync(string databas, string kemdatabas, string lev_text)
        {
            this.GetProdSupplierTextAsync(databas, kemdatabas, lev_text, null);
        }

        /// <remarks/>
        public void GetProdSupplierTextAsync(string databas, string kemdatabas, string lev_text, object userState)
        {
            if ((this.GetProdSupplierTextOperationCompleted == null))
            {
                this.GetProdSupplierTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProdSupplierTextOperationCompleted);
            }
            this.InvokeAsync("GetProdSupplierText", new object[] {
                        databas,
                        kemdatabas,
                        lev_text}, this.GetProdSupplierTextOperationCompleted, userState);
        }

        private void OnGetProdSupplierTextOperationCompleted(object arg)
        {
            if ((this.GetProdSupplierTextCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProdSupplierTextCompleted(this, new GetProdSupplierTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInventoryStatus", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInventoryStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double orgar, double platsid, double lokalid)
        {
            object[] results = this.Invoke("GetInventoryStatus", new object[] {
                        databas,
                        orgid,
                        orgar,
                        platsid,
                        lokalid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInventoryStatusAsync(string databas, double orgid, double orgar, double platsid, double lokalid)
        {
            this.GetInventoryStatusAsync(databas, orgid, orgar, platsid, lokalid);
        }

        /// <remarks/>
        public void GetInventoryStatusAsync(string databas, double orgid, double orgar, double platsid, double lokalid, object userState)
        {
            if ((this.GetInventoryStatusOperationCompleted == null))
            {
                this.GetInventoryStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryStatusOperationCompleted);
            }
            this.InvokeAsync("GetInventoryStatus", new object[] {
                        databas,
                        orgid,
                        orgar,
                        platsid,
                        lokalid
                        }, this.GetInventoryStatusOperationCompleted, userState);
        }

        private void OnGetInventoryStatusOperationCompleted(object arg)
        {
            if ((this.GetInventoryStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryStatusCompleted(this, new GetInventoryStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPropID", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPropID([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string propName)
        {
            object[] results = this.Invoke("GetPropID", new object[] {
                        databas,
                        propName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPropIDAsync(string databas, string propName)
        {
            this.GetPropIDAsync(databas, propName, null);
        }

        /// <remarks/>
        public void GetPropIDAsync(string databas, string propName, object userState)
        {
            if ((this.GetPropIDOperationCompleted == null))
            {
                this.GetPropIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropIDOperationCompleted);
            }
            this.InvokeAsync("GetPropID", new object[] {
                        databas,
                        propName}, this.GetPropIDOperationCompleted, userState);
        }

        private void OnGetPropIDOperationCompleted(object arg)
        {
            if ((this.GetPropIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropIDCompleted(this, new GetPropIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgar", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgar([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid)
        {
            object[] results = this.Invoke("GetOrgar", new object[] {
                        databas,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgarAsync(string databas, double verkid)
        {
            this.GetOrgarAsync(databas, verkid);
        }

        /// <remarks/>
        public void GetOrgarAsync(string databas, double verkid, object userState)
        {
            if ((this.GetOrgarOperationCompleted == null))
            {
                this.GetOrgarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgarOperationCompleted);
            }
            this.InvokeAsync("GetOrgar", new object[] {
                        databas,
                        verkid
                        }, this.GetOrgarOperationCompleted, userState);
        }

        private void OnGetOrgarOperationCompleted(object arg)
        {
            if ((this.GetOrgarCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgarCompleted(this, new GetOrgarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrgnamn", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrgnamn([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, double orgid)
        {
            object[] results = this.Invoke("GetOrgnamn", new object[] {
                        databas,
                        kemidatabas,
                        orgid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgnamnAsync(string databas, string kemidatabas, double orgid)
        {
            this.GetOrgnamnAsync(databas, kemidatabas, orgid);
        }

        /// <remarks/>
        public void GetOrgnamnAsync(string databas, string kemidatabas, double orgid, object userState)
        {
            if ((this.GetOrgnamnOperationCompleted == null))
            {
                this.GetOrgnamnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgnamnOperationCompleted);
            }
            this.InvokeAsync("GetOrgnamn", new object[] {
                        databas,
                        kemidatabas,
                        orgid
                        }, this.GetOrgnamnOperationCompleted, userState);
        }

        private void OnGetOrgnamnOperationCompleted(object arg)
        {
            if ((this.GetOrgnamnCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgnamnCompleted(this, new GetOrgnamnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:OrderCheckOut", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string OrderCheckOut(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string gemkemDb,
                    double verkid,
                    double lang,
                    double rowId,
                    double antal,
                    double userID,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username,
                    double storageid,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcodeprefix,
                    double tubes,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string comment)
        {
            object[] results = this.Invoke("OrderCheckOut", new object[] {
                        kemiDb,
                        gemkemDb,
                        verkid,
                        lang,
                        rowId,
                        antal,
                        userID,
                        username,
                        storageid,
                        barcodeprefix,
                        tubes,
                        comment});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void OrderCheckOutAsync(
                    string kemiDb,
                    string gemkemDb,
                    double verkid,
                    double lang,
                    double rowId,
                    double antal,
                    double userID,
                    string username,
                    double storageid,
                    string barcodeprefix,
                    double tubes,
                    string comment)
        {
            this.OrderCheckOutAsync(kemiDb, gemkemDb, verkid, lang, rowId, antal, userID, username, storageid, barcodeprefix, tubes, comment);
        }

        /// <remarks/>
        public void OrderCheckOutAsync(
                    string kemiDb,
                    string gemkemDb,
                    double verkid,
                    double lang,
                    double rowId,
                    double antal,
                    double userID,
                    string username,
                    double storageid,
                    string barcodeprefix,
                    double tubes,
                    string comment,
                    object userState)
        {
            if ((this.OrderCheckOutOperationCompleted == null))
            {
                this.OrderCheckOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderCheckOutOperationCompleted);
            }
            this.InvokeAsync("OrderCheckOut", new object[] {
                        kemiDb,
                        gemkemDb,
                        verkid,
                        lang,
                        rowId,
                        antal,
                        userID,
                        username,
                        storageid,
                        barcodeprefix,
                        tubes,
                        comment}, this.OrderCheckOutOperationCompleted, userState);
        }

        private void OnOrderCheckOutOperationCompleted(object arg)
        {
            if ((this.OrderCheckOutCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderCheckOutCompleted(this, new OrderCheckOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInfo", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid)
        {
            object[] results = this.Invoke("GetInfo", new object[] {
                        databas,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInfoAsync(string databas, double verkid)
        {
            this.GetInfoAsync(databas, verkid);
        }

        /// <remarks/>
        public void GetInfoAsync(string databas, double verkid, object userState)
        {
            if ((this.GetInfoOperationCompleted == null))
            {
                this.GetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoOperationCompleted);
            }
            this.InvokeAsync("GetInfo", new object[] {
                        databas,
                        verkid
                        }, this.GetInfoOperationCompleted, userState);
        }

        private void OnGetInfoOperationCompleted(object arg)
        {
            if ((this.GetInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStorageParentCheck", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetStorageParentCheck([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalID, double storagePropID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("GetStorageParentCheck", new object[] {
                        databas,
                        lokalID,
                        storagePropID,
                        lokaldb});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStorageParentCheckAsync(string databas, double lokalID, double storagePropID, string lokaldb)
        {
            this.GetStorageParentCheckAsync(databas, lokalID, storagePropID, lokaldb);
        }

        /// <remarks/>
        public void GetStorageParentCheckAsync(string databas, double lokalID, double storagePropID, string lokaldb, object userState)
        {
            if ((this.GetStorageParentCheckOperationCompleted == null))
            {
                this.GetStorageParentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageParentCheckOperationCompleted);
            }
            this.InvokeAsync("GetStorageParentCheck", new object[] {
                        databas,
                        lokalID,
                        storagePropID,
                        lokaldb}, this.GetStorageParentCheckOperationCompleted, userState);
        }

        private void OnGetStorageParentCheckOperationCompleted(object arg)
        {
            if ((this.GetStorageParentCheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageParentCheckCompleted(this, new GetStorageParentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPrintingList", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPrintingList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string release)
        {
            object[] results = this.Invoke("GetPrintingList", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                        lokalID,
                        cabinetID,
                        orgAr,
                        release});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPrintingListAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr, string release)
        {
            this.GetPrintingListAsync(databas, kemdatabas, rumdatabas, orgID, lokalID, cabinetID, orgAr, release);
        }

        /// <remarks/>
        public void GetPrintingListAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr, string release, object userState)
        {
            if ((this.GetPrintingListOperationCompleted == null))
            {
                this.GetPrintingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrintingListOperationCompleted);
            }
            this.InvokeAsync("GetPrintingList", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                        lokalID,
                        cabinetID,
                        orgAr,
                        release}, this.GetPrintingListOperationCompleted, userState);
        }

        private void OnGetPrintingListOperationCompleted(object arg)
        {
            if ((this.GetPrintingListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrintingListCompleted(this, new GetPrintingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ReleaseRules", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string ReleaseRules([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double orgar)
        {
            object[] results = this.Invoke("ReleaseRules", new object[] {
                        databas,
                        orgid,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ReleaseRulesAsync(string databas, double orgid, double orgar)
        {
            this.ReleaseRulesAsync(databas, orgid, orgar);
        }

        /// <remarks/>
        public void ReleaseRulesAsync(string databas, double orgid, double orgar, object userState)
        {
            if ((this.ReleaseRulesOperationCompleted == null))
            {
                this.ReleaseRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseRulesOperationCompleted);
            }
            this.InvokeAsync("ReleaseRules", new object[] {
                        databas,
                        orgid,
                        orgar
                        }, this.ReleaseRulesOperationCompleted, userState);
        }

        private void OnReleaseRulesOperationCompleted(object arg)
        {
            if ((this.ReleaseRulesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseRulesCompleted(this, new ReleaseRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetCountries", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetCountries([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sprak)
        {
            object[] results = this.Invoke("GetCountries", new object[] {
                        databas,
                        kemidb,
                        lokaldb,
                        sprak});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCountriesAsync(string databas, string kemidb, string lokaldb, string sprak)
        {
            this.GetCountriesAsync(databas, kemidb, lokaldb, sprak, null);
        }

        /// <remarks/>
        public void GetCountriesAsync(string databas, string kemidb, string lokaldb, string sprak, object userState)
        {
            if ((this.GetCountriesOperationCompleted == null))
            {
                this.GetCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountriesOperationCompleted);
            }
            this.InvokeAsync("GetCountries", new object[] {
                        databas,
                        kemidb,
                        lokaldb,
                        sprak}, this.GetCountriesOperationCompleted, userState);
        }

        private void OnGetCountriesOperationCompleted(object arg)
        {
            if ((this.GetCountriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountriesCompleted(this, new GetCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetProdSupplier", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetProdSupplier([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, double prodid)
        {
            object[] results = this.Invoke("GetProdSupplier", new object[] {
                        databas,
                        kemdatabas,
                        prodid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetProdSupplierAsync(string databas, string kemdatabas, double prodid)
        {
            this.GetProdSupplierAsync(databas, kemdatabas, prodid);
        }

        /// <remarks/>
        public void GetProdSupplierAsync(string databas, string kemdatabas, double prodid, object userState)
        {
            if ((this.GetProdSupplierOperationCompleted == null))
            {
                this.GetProdSupplierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProdSupplierOperationCompleted);
            }
            this.InvokeAsync("GetProdSupplier", new object[] {
                        databas,
                        kemdatabas,
                        prodid
                        }, this.GetProdSupplierOperationCompleted, userState);
        }

        private void OnGetProdSupplierOperationCompleted(object arg)
        {
            if ((this.GetProdSupplierCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProdSupplierCompleted(this, new GetProdSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckIfBarcodeExists", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckIfBarcodeExists([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode, double orgar, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, double orgid)
        {
            object[] results = this.Invoke("CheckIfBarcodeExists", new object[] {
                        databas,
                        barcode,
                        orgar,
                        kemdatabas,
                        orgid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckIfBarcodeExistsAsync(string databas, string barcode, double orgar, string kemdatabas, double orgid)
        {
            this.CheckIfBarcodeExistsAsync(databas, barcode, orgar, kemdatabas, orgid);
        }

        /// <remarks/>
        public void CheckIfBarcodeExistsAsync(string databas, string barcode, double orgar, string kemdatabas, double orgid, object userState)
        {
            if ((this.CheckIfBarcodeExistsOperationCompleted == null))
            {
                this.CheckIfBarcodeExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfBarcodeExistsOperationCompleted);
            }
            this.InvokeAsync("CheckIfBarcodeExists", new object[] {
                        databas,
                        barcode,
                        orgar,
                        kemdatabas,
                        orgid
                        }, this.CheckIfBarcodeExistsOperationCompleted, userState);
        }

        private void OnCheckIfBarcodeExistsOperationCompleted(object arg)
        {
            if ((this.CheckIfBarcodeExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfBarcodeExistsCompleted(this, new CheckIfBarcodeExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPrintBF", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPrintBF([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod)
        {
            object[] results = this.Invoke("GetPrintBF", new object[] {
                        databas,
                        kemidatabas,
                        streckkod});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPrintBFAsync(string databas, string kemidatabas, string streckkod)
        {
            this.GetPrintBFAsync(databas, kemidatabas, streckkod, null);
        }

        /// <remarks/>
        public void GetPrintBFAsync(string databas, string kemidatabas, string streckkod, object userState)
        {
            if ((this.GetPrintBFOperationCompleted == null))
            {
                this.GetPrintBFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrintBFOperationCompleted);
            }
            this.InvokeAsync("GetPrintBF", new object[] {
                        databas,
                        kemidatabas,
                        streckkod}, this.GetPrintBFOperationCompleted, userState);
        }

        private void OnGetPrintBFOperationCompleted(object arg)
        {
            if ((this.GetPrintBFCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrintBFCompleted(this, new GetPrintBFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:FinnsProd", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string FinnsProd([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string cas, double prod, double verkid)
        {
            object[] results = this.Invoke("FinnsProd", new object[] {
                        databas,
                        kemidatabas,
                        cas,
                        prod,
                        verkid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void FinnsProdAsync(string databas, string kemidatabas, string cas, double prod, double verkid)
        {
            this.FinnsProdAsync(databas, kemidatabas, cas, prod, verkid);
        }

        /// <remarks/>
        public void FinnsProdAsync(string databas, string kemidatabas, string cas, double prod, double verkid, object userState)
        {
            if ((this.FinnsProdOperationCompleted == null))
            {
                this.FinnsProdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinnsProdOperationCompleted);
            }
            this.InvokeAsync("FinnsProd", new object[] {
                        databas,
                        kemidatabas,
                        cas,
                        prod,
                        verkid
                        }, this.FinnsProdOperationCompleted, userState);
        }

        private void OnFinnsProdOperationCompleted(object arg)
        {
            if ((this.FinnsProdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinnsProdCompleted(this, new FinnsProdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:InsertProdSupplier", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string InsertProdSupplier([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, double prodID, double levID)
        {
            object[] results = this.Invoke("InsertProdSupplier", new object[] {
                        kemdatabas,
                        prodID,
                        levID
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InsertProdSupplierAsync(string kemdatabas, double prodID, double levID)
        {
            this.InsertProdSupplierAsync(kemdatabas, prodID, levID);
        }

        /// <remarks/>
        public void InsertProdSupplierAsync(string kemdatabas, double prodID, double levID, object userState)
        {
            if ((this.InsertProdSupplierOperationCompleted == null))
            {
                this.InsertProdSupplierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertProdSupplierOperationCompleted);
            }
            this.InvokeAsync("InsertProdSupplier", new object[] {
                        kemdatabas,
                        prodID,
                        levID
                        }, this.InsertProdSupplierOperationCompleted, userState);
        }

        private void OnInsertProdSupplierOperationCompleted(object arg)
        {
            if ((this.InsertProdSupplierCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertProdSupplierCompleted(this, new InsertProdSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetCheckedInProd", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetCheckedInProd([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod, double userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string usersys, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string prefix)
        {
            object[] results = this.Invoke("GetCheckedInProd", new object[] {
                        databas,
                        kemiDb,
                        streckkod,
                        userid,
                        username,
                        usersys,
                        prefix});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCheckedInProdAsync(string databas, string kemiDb, string streckkod, double userid, string username, string usersys, string prefix)
        {
            this.GetCheckedInProdAsync(databas, kemiDb, streckkod, userid, username, usersys, prefix);
        }

        /// <remarks/>
        public void GetCheckedInProdAsync(string databas, string kemiDb, string streckkod, double userid, string username, string usersys, string prefix, object userState)
        {
            if ((this.GetCheckedInProdOperationCompleted == null))
            {
                this.GetCheckedInProdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckedInProdOperationCompleted);
            }
            this.InvokeAsync("GetCheckedInProd", new object[] {
                        databas,
                        kemiDb,
                        streckkod,
                        userid,
                        username,
                        usersys,
                        prefix}, this.GetCheckedInProdOperationCompleted, userState);
        }

        private void OnGetCheckedInProdOperationCompleted(object arg)
        {
            if ((this.GetCheckedInProdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckedInProdCompleted(this, new GetCheckedInProdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetDBs", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetDBs()
        {
            object[] results = this.Invoke("GetDBs", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetDBsAsync()
        {
            this.GetDBsAsync(null);
        }

        /// <remarks/>
        public void GetDBsAsync(object userState)
        {
            if ((this.GetDBsOperationCompleted == null))
            {
                this.GetDBsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBsOperationCompleted);
            }
            this.InvokeAsync("GetDBs", new object[0], this.GetDBsOperationCompleted, userState);
        }

        private void OnGetDBsOperationCompleted(object arg)
        {
            if ((this.GetDBsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBsCompleted(this, new GetDBsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckIfOrange", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckIfOrange([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double orgid, double orgar, double prodid)
        {
            object[] results = this.Invoke("CheckIfOrange", new object[] {
                        databas,
                        kemiDb,
                        orgid,
                        orgar,
                        prodid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckIfOrangeAsync(string databas, string kemiDb, double orgid, double orgar, double prodid)
        {
            this.CheckIfOrangeAsync(databas, kemiDb, orgid, orgar, prodid);
        }

        /// <remarks/>
        public void CheckIfOrangeAsync(string databas, string kemiDb, double orgid, double orgar, double prodid, object userState)
        {
            if ((this.CheckIfOrangeOperationCompleted == null))
            {
                this.CheckIfOrangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfOrangeOperationCompleted);
            }
            this.InvokeAsync("CheckIfOrange", new object[] {
                        databas,
                        kemiDb,
                        orgid,
                        orgar,
                        prodid
                        }, this.CheckIfOrangeOperationCompleted, userState);
        }

        private void OnCheckIfOrangeOperationCompleted(object arg)
        {
            if ((this.CheckIfOrangeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfOrangeCompleted(this, new CheckIfOrangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStorageName", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetStorageName([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr)
        {
            object[] results = this.Invoke("GetStorageName", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                        lokalID,
                        cabinetID,
                        orgAr
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStorageNameAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr)
        {
            this.GetStorageNameAsync(databas, kemdatabas, rumdatabas, orgID, lokalID, cabinetID, orgAr);
        }

        /// <remarks/>
        public void GetStorageNameAsync(string databas, string kemdatabas, string rumdatabas, double orgID, double lokalID, double cabinetID, double orgAr, object userState)
        {
            if ((this.GetStorageNameOperationCompleted == null))
            {
                this.GetStorageNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageNameOperationCompleted);
            }
            this.InvokeAsync("GetStorageName", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        orgID,
                        lokalID,
                        cabinetID,
                        orgAr
                        }, this.GetStorageNameOperationCompleted, userState);
        }

        private void OnGetStorageNameOperationCompleted(object arg)
        {
            if ((this.GetStorageNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageNameCompleted(this, new GetStorageNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetVersion", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetVersion(out double @return)
        {
            object[] results = this.Invoke("GetVersion", new object[0]);
            @return = ((double)(results[0]));
        }

        /// <remarks/>
        public void GetVersionAsync()
        {
            this.GetVersionAsync(null);
        }

        /// <remarks/>
        public void GetVersionAsync(object userState)
        {
            if ((this.GetVersionOperationCompleted == null))
            {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }

        private void OnGetVersionOperationCompleted(object arg)
        {
            if ((this.GetVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetNewVersion", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetNewVersion()
        {
            object[] results = this.Invoke("GetNewVersion", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetNewVersionAsync()
        {
            this.GetNewVersionAsync(null);
        }

        /// <remarks/>
        public void GetNewVersionAsync(object userState)
        {
            if ((this.GetNewVersionOperationCompleted == null))
            {
                this.GetNewVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewVersionOperationCompleted);
            }
            this.InvokeAsync("GetNewVersion", new object[0], this.GetNewVersionOperationCompleted, userState);
        }

        private void OnGetNewVersionOperationCompleted(object arg)
        {
            if ((this.GetNewVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewVersionCompleted(this, new GetNewVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRoomProp", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetRoomProp([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalID, double cabinetID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("GetRoomProp", new object[] {
                        databas,
                        lokalID,
                        cabinetID,
                        lokaldb});
            return ((string)(results[0]));
        }


        /// <remarks/>
        public void GetRoomPropAsync(string databas, double lokalID, double cabinetID, string lokaldb)
        {
            this.GetRoomPropAsync(databas, lokalID, cabinetID, lokaldb);
        }

        /// <remarks/>
        public void GetRoomPropAsync(string databas, double lokalID, double cabinetID, string lokaldb, object userState)
        {
            if ((this.GetRoomPropOperationCompleted == null))
            {
                this.GetRoomPropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoomPropOperationCompleted);
            }
            this.InvokeAsync("GetRoomProp", new object[] {
                        databas,
                        lokalID,
                        cabinetID,
                        lokaldb}, this.GetRoomPropOperationCompleted, userState);
        }

        private void OnGetRoomPropOperationCompleted(object arg)
        {
            if ((this.GetRoomPropCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoomPropCompleted(this, new GetRoomPropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetInventoryCabinets", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetInventoryCabinets([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double lokalid, double orgid, double orgar)
        {
            object[] results = this.Invoke("GetInventoryCabinets", new object[] {
                        databas,
                        lokalid,
                        orgid,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInventoryCabinetsAsync(string databas, double lokalid, double orgid, double orgar)
        {
            this.GetInventoryCabinetsAsync(databas, lokalid, orgid, orgar);
        }

        /// <remarks/>
        public void GetInventoryCabinetsAsync(string databas, double lokalid, double orgid, double orgar, object userState)
        {
            if ((this.GetInventoryCabinetsOperationCompleted == null))
            {
                this.GetInventoryCabinetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInventoryCabinetsOperationCompleted);
            }
            this.InvokeAsync("GetInventoryCabinets", new object[] {
                        databas,
                        lokalid,
                        orgid,
                        orgar
                        }, this.GetInventoryCabinetsOperationCompleted, userState);
        }

        private void OnGetInventoryCabinetsOperationCompleted(object arg)
        {
            if ((this.GetInventoryCabinetsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInventoryCabinetsCompleted(this, new GetInventoryCabinetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetUserNameAndPasswordWithBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetUserNameAndPasswordWithBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode)
        {
            object[] results = this.Invoke("GetUserNameAndPasswordWithBarcode", new object[] {
                        databas,
                        barcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetUserNameAndPasswordWithBarcodeAsync(string databas, string barcode)
        {
            this.GetUserNameAndPasswordWithBarcodeAsync(databas, barcode, null);
        }

        /// <remarks/>
        public void GetUserNameAndPasswordWithBarcodeAsync(string databas, string barcode, object userState)
        {
            if ((this.GetUserNameAndPasswordWithBarcodeOperationCompleted == null))
            {
                this.GetUserNameAndPasswordWithBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameAndPasswordWithBarcodeOperationCompleted);
            }
            this.InvokeAsync("GetUserNameAndPasswordWithBarcode", new object[] {
                        databas,
                        barcode}, this.GetUserNameAndPasswordWithBarcodeOperationCompleted, userState);
        }

        private void OnGetUserNameAndPasswordWithBarcodeOperationCompleted(object arg)
        {
            if ((this.GetUserNameAndPasswordWithBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameAndPasswordWithBarcodeCompleted(this, new GetUserNameAndPasswordWithBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPcAppInst", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPcAppInst()
        {
            object[] results = this.Invoke("GetPcAppInst", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPcAppInstAsync()
        {
            this.GetPcAppInstAsync(null);
        }

        /// <remarks/>
        public void GetPcAppInstAsync(object userState)
        {
            if ((this.GetPcAppInstOperationCompleted == null))
            {
                this.GetPcAppInstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPcAppInstOperationCompleted);
            }
            this.InvokeAsync("GetPcAppInst", new object[0], this.GetPcAppInstOperationCompleted, userState);
        }

        private void OnGetPcAppInstOperationCompleted(object arg)
        {
            if ((this.GetPcAppInstCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPcAppInstCompleted(this, new GetPcAppInstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:MoveToPapperskorg", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string MoveToPapperskorg([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string KpinvtransIDlist, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database)
        {
            object[] results = this.Invoke("MoveToPapperskorg", new object[] {
                        KpinvtransIDlist,
                        username,
                        database});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void MoveToPapperskorgAsync(string KpinvtransIDlist, string username, string database)
        {
            this.MoveToPapperskorgAsync(KpinvtransIDlist, username, database, null);
        }

        /// <remarks/>
        public void MoveToPapperskorgAsync(string KpinvtransIDlist, string username, string database, object userState)
        {
            if ((this.MoveToPapperskorgOperationCompleted == null))
            {
                this.MoveToPapperskorgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveToPapperskorgOperationCompleted);
            }
            this.InvokeAsync("MoveToPapperskorg", new object[] {
                        KpinvtransIDlist,
                        username,
                        database}, this.MoveToPapperskorgOperationCompleted, userState);
        }

        private void OnMoveToPapperskorgOperationCompleted(object arg)
        {
            if ((this.MoveToPapperskorgCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveToPapperskorgCompleted(this, new MoveToPapperskorgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetAvd", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetAvd([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, double anvid, double ar, double verkid)
        {
            object[] results = this.Invoke("GetAvd", new object[] {
                        databas,
                        kemidb,
                        anvid,
                        ar,
                        verkid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAvdAsync(string databas, string kemidb, double anvid, double ar, double verkid)
        {
            this.GetAvdAsync(databas, kemidb, anvid, ar, verkid);
        }

        /// <remarks/>
        public void GetAvdAsync(string databas, string kemidb, double anvid, double ar, double verkid, object userState)
        {
            if ((this.GetAvdOperationCompleted == null))
            {
                this.GetAvdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvdOperationCompleted);
            }
            this.InvokeAsync("GetAvd", new object[] {
                        databas,
                        kemidb,
                        anvid,
                        ar,
                        verkid
                        }, this.GetAvdOperationCompleted, userState);
        }

        private void OnGetAvdOperationCompleted(object arg)
        {
            if ((this.GetAvdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvdCompleted(this, new GetAvdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStorageNameOverview", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetStorageNameOverview([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string rumdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod)
        {
            object[] results = this.Invoke("GetStorageNameOverview", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        streckkod});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetStorageNameOverviewAsync(string databas, string kemdatabas, string rumdatabas, string streckkod)
        {
            this.GetStorageNameOverviewAsync(databas, kemdatabas, rumdatabas, streckkod, null);
        }

        /// <remarks/>
        public void GetStorageNameOverviewAsync(string databas, string kemdatabas, string rumdatabas, string streckkod, object userState)
        {
            if ((this.GetStorageNameOverviewOperationCompleted == null))
            {
                this.GetStorageNameOverviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStorageNameOverviewOperationCompleted);
            }
            this.InvokeAsync("GetStorageNameOverview", new object[] {
                        databas,
                        kemdatabas,
                        rumdatabas,
                        streckkod}, this.GetStorageNameOverviewOperationCompleted, userState);
        }

        private void OnGetStorageNameOverviewOperationCompleted(object arg)
        {
            if ((this.GetStorageNameOverviewCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStorageNameOverviewCompleted(this, new GetStorageNameOverviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:SaveLoginBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string SaveLoginBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barcode)
        {
            object[] results = this.Invoke("SaveLoginBarcode", new object[] {
                        databas,
                        userid,
                        barcode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SaveLoginBarcodeAsync(string databas, double userid, string barcode)
        {
            this.SaveLoginBarcodeAsync(databas, userid, barcode);
        }

        /// <remarks/>
        public void SaveLoginBarcodeAsync(string databas, double userid, string barcode, object userState)
        {
            if ((this.SaveLoginBarcodeOperationCompleted == null))
            {
                this.SaveLoginBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLoginBarcodeOperationCompleted);
            }
            this.InvokeAsync("SaveLoginBarcode", new object[] {
                        databas,
                        userid,
                        barcode}, this.SaveLoginBarcodeOperationCompleted, userState);
        }

        private void OnSaveLoginBarcodeOperationCompleted(object arg)
        {
            if ((this.SaveLoginBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLoginBarcodeCompleted(this, new SaveLoginBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetPropName", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetPropName([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double transid)
        {
            object[] results = this.Invoke("GetPropName", new object[] {
                        databas,
                        transid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPropNameAsync(string databas, double transid)
        {
            this.GetPropNameAsync(databas, transid);
        }

        /// <remarks/>
        public void GetPropNameAsync(string databas, double transid, object userState)
        {
            if ((this.GetPropNameOperationCompleted == null))
            {
                this.GetPropNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropNameOperationCompleted);
            }
            this.InvokeAsync("GetPropName", new object[] {
                        databas,
                        transid
                        }, this.GetPropNameOperationCompleted, userState);
        }

        private void OnGetPropNameOperationCompleted(object arg)
        {
            if ((this.GetPropNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropNameCompleted(this, new GetPropNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ProductProperty", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string ProductProperty([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double prodID, double propertyID)
        {
            object[] results = this.Invoke("ProductProperty", new object[] {
                        databas,
                        prodID,
                        propertyID
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ProductPropertyAsync(string databas, double prodID, double propertyID)
        {
            this.ProductPropertyAsync(databas, prodID, propertyID);
        }

        /// <remarks/>
        public void ProductPropertyAsync(string databas, double prodID, double propertyID, object userState)
        {
            if ((this.ProductPropertyOperationCompleted == null))
            {
                this.ProductPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductPropertyOperationCompleted);
            }
            this.InvokeAsync("ProductProperty", new object[] {
                        databas,
                        prodID,
                        propertyID
                        }, this.ProductPropertyOperationCompleted, userState);
        }

        private void OnProductPropertyOperationCompleted(object arg)
        {
            if ((this.ProductPropertyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductPropertyCompleted(this, new ProductPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetUnit", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetUnit([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double huvudEnhetId)
        {
            object[] results = this.Invoke("GetUnit", new object[] {
                        kemiDb,
                        huvudEnhetId
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetUnitAsync(string kemiDb, double huvudEnhetId)
        {
            this.GetUnitAsync(kemiDb, huvudEnhetId);
        }

        /// <remarks/>
        public void GetUnitAsync(string kemiDb, double huvudEnhetId, object userState)
        {
            if ((this.GetUnitOperationCompleted == null))
            {
                this.GetUnitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnitOperationCompleted);
            }
            this.InvokeAsync("GetUnit", new object[] {
                        kemiDb,
                        huvudEnhetId
                        }, this.GetUnitOperationCompleted, userState);
        }

        private void OnGetUnitOperationCompleted(object arg)
        {
            if ((this.GetUnitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnitCompleted(this, new GetUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:UpdateKpinvStatus", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string UpdateKpinvStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double orgar, double platsid, double lokalid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb)
        {
            object[] results = this.Invoke("UpdateKpinvStatus", new object[] {
                        databas,
                        orgid,
                        orgar,
                        platsid,
                        lokalid,
                        lokaldb});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateKpinvStatusAsync(string databas, double orgid, double orgar, double platsid, double lokalid, string lokaldb)
        {
            this.UpdateKpinvStatusAsync(databas, orgid, orgar, platsid, lokalid, lokaldb, null);
        }

        /// <remarks/>
        public void UpdateKpinvStatusAsync(string databas, double orgid, double orgar, double platsid, double lokalid, string lokaldb, object userState)
        {
            if ((this.UpdateKpinvStatusOperationCompleted == null))
            {
                this.UpdateKpinvStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateKpinvStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateKpinvStatus", new object[] {
                        databas,
                        orgid,
                        orgar,
                        platsid,
                        lokalid,
                        lokaldb}, this.UpdateKpinvStatusOperationCompleted, userState);
        }

        private void OnUpdateKpinvStatusOperationCompleted(object arg)
        {
            if ((this.UpdateKpinvStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateKpinvStatusCompleted(this, new UpdateKpinvStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AvanceradNiva", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string AvanceradNiva([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double orgid, double orgar)
        {
            object[] results = this.Invoke("AvanceradNiva", new object[] {
                        databas,
                        orgid,
                        orgar
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AvanceradNivaAsync(string databas, double orgid, double orgar)
        {
            this.AvanceradNivaAsync(databas, orgid, orgar);
        }

        /// <remarks/>
        public void AvanceradNivaAsync(string databas, double orgid, double orgar, object userState)
        {
            if ((this.AvanceradNivaOperationCompleted == null))
            {
                this.AvanceradNivaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAvanceradNivaOperationCompleted);
            }
            this.InvokeAsync("AvanceradNiva", new object[] {
                        databas,
                        orgid,
                        orgar
                        }, this.AvanceradNivaOperationCompleted, userState);
        }

        private void OnAvanceradNivaOperationCompleted(object arg)
        {
            if ((this.AvanceradNivaCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AvanceradNivaCompleted(this, new AvanceradNivaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:LokFast", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string LokFast([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double verkid, double orgnod)
        {
            object[] results = this.Invoke("LokFast", new object[] {
                        databas,
                        verkid,
                        orgnod
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LokFastAsync(string databas, double verkid, double orgnod)
        {
            this.LokFastAsync(databas, verkid, orgnod);
        }

        /// <remarks/>
        public void LokFastAsync(string databas, double verkid, double orgnod, object userState)
        {
            if ((this.LokFastOperationCompleted == null))
            {
                this.LokFastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLokFastOperationCompleted);
            }
            this.InvokeAsync("LokFast", new object[] {
                        databas,
                        verkid,
                        orgnod
                        }, this.LokFastOperationCompleted, userState);
        }

        private void OnLokFastOperationCompleted(object arg)
        {
            if ((this.LokFastCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LokFastCompleted(this, new LokFastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:OrderDeleterow", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string OrderDeleterow([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, double rowId)
        {
            object[] results = this.Invoke("OrderDeleterow", new object[] {
                        kemiDb,
                        rowId
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void OrderDeleterowAsync(string kemiDb, double rowId)
        {
            this.OrderDeleterowAsync(kemiDb, rowId);
        }

        /// <remarks/>
        public void OrderDeleterowAsync(string kemiDb, double rowId, object userState)
        {
            if ((this.OrderDeleterowOperationCompleted == null))
            {
                this.OrderDeleterowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderDeleterowOperationCompleted);
            }
            this.InvokeAsync("OrderDeleterow", new object[] {
                        kemiDb,
                        rowId
                        }, this.OrderDeleterowOperationCompleted, userState);
        }

        private void OnOrderDeleterowOperationCompleted(object arg)
        {
            if ((this.OrderDeleterowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderDeleterowCompleted(this, new OrderDeleterowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:FinnsMolstrukt", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string FinnsMolstrukt([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string cas)
        {
            object[] results = this.Invoke("FinnsMolstrukt", new object[] {
                        databas,
                        kemidatabas,
                        cas});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void FinnsMolstruktAsync(string databas, string kemidatabas, string cas)
        {
            this.FinnsMolstruktAsync(databas, kemidatabas, cas);
        }

        /// <remarks/>
        public void FinnsMolstruktAsync(string databas, string kemidatabas, string cas, object userState)
        {
            if ((this.FinnsMolstruktOperationCompleted == null))
            {
                this.FinnsMolstruktOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinnsMolstruktOperationCompleted);
            }
            this.InvokeAsync("FinnsMolstrukt", new object[] {
                        databas,
                        kemidatabas,
                        cas}, this.FinnsMolstruktOperationCompleted, userState);
        }

        private void OnFinnsMolstruktOperationCompleted(object arg)
        {
            if ((this.FinnsMolstruktCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinnsMolstruktCompleted(this, new FinnsMolstruktCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetOrder", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string gemkemDb, double lang, double orderId, double userId, double aktar, double val, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sokterm)
        {
            object[] results = this.Invoke("GetOrder", new object[] {
                        kemiDb,
                        gemkemDb,
                        lang,
                        orderId,
                        userId,
                        aktar,
                        val,
                        sokterm
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrderAsync(string kemiDb, string gemkemDb, double lang, double orderId, double userId, double aktar, double val, string sokterm)
        {
            this.GetOrderAsync(kemiDb, gemkemDb, lang, orderId, userId, aktar, val, sokterm);
        }

        /// <remarks/>
        public void GetOrderAsync(string kemiDb, string gemkemDb, double lang, double orderId, double userId, double aktar, double val, string sokterm, object userState)
        {
            if ((this.GetOrderOperationCompleted == null))
            {
                this.GetOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderOperationCompleted);
            }
            this.InvokeAsync("GetOrder", new object[] {
                        kemiDb,
                        gemkemDb,
                        lang,
                        orderId,
                        userId,
                        aktar,
                        val,
                        sokterm
                        }, this.GetOrderOperationCompleted, userState);
        }

        private void OnGetOrderOperationCompleted(object arg)
        {
            if ((this.GetOrderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderCompleted(this, new GetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetArtNr", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetArtNr([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemdatabas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string levid, double prodid)
        {
            object[] results = this.Invoke("GetArtNr", new object[] {
                        databas,
                        kemdatabas,
                        levid,
                        prodid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetArtNrAsync(string databas, string kemdatabas, string levid, double prodid)
        {
            this.GetArtNrAsync(databas, kemdatabas, levid, prodid);
        }

        /// <remarks/>
        public void GetArtNrAsync(string databas, string kemdatabas, string levid, double prodid, object userState)
        {
            if ((this.GetArtNrOperationCompleted == null))
            {
                this.GetArtNrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArtNrOperationCompleted);
            }
            this.InvokeAsync("GetArtNr", new object[] {
                        databas,
                        kemdatabas,
                        levid,
                        prodid
                        }, this.GetArtNrOperationCompleted, userState);
        }

        private void OnGetArtNrOperationCompleted(object arg)
        {
            if ((this.GetArtNrCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArtNrCompleted(this, new GetArtNrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:NollstallAvd", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string NollstallAvd([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemidb, double orgid, double verkid, double anvid)
        {
            object[] results = this.Invoke("NollstallAvd", new object[] {
                        databas,
                        kemidb,
                        orgid,
                        verkid,
                        anvid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void NollstallAvdAsync(string databas, string kemidb, double orgid, double verkid, double anvid)
        {
            this.NollstallAvdAsync(databas, kemidb, orgid, verkid, anvid);
        }

        /// <remarks/>
        public void NollstallAvdAsync(string databas, string kemidb, double orgid, double verkid, double anvid, object userState)
        {
            if ((this.NollstallAvdOperationCompleted == null))
            {
                this.NollstallAvdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNollstallAvdOperationCompleted);
            }
            this.InvokeAsync("NollstallAvd", new object[] {
                        databas,
                        kemidb,
                        orgid,
                        verkid,
                        anvid}, this.NollstallAvdOperationCompleted, userState);
        }

        private void OnNollstallAvdOperationCompleted(object arg)
        {
            if ((this.NollstallAvdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NollstallAvdCompleted(this, new NollstallAvdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:TransferArticle", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string TransferArticle(
                    double KpinvtransID,
                    double KpinventoryID,
                    double DestinationCabinetID,
                    double destinationlokalID,
                    double destinationorgID,
                    double destinationInventoryPeriod,
                    double orgarcode,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username,
                    double type,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database,
                    bool takeInventory,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string lokaldb
                    )
        {
            object[] results = this.Invoke("TransferArticle", new object[] {
                        KpinvtransID,
                        KpinventoryID,
                        DestinationCabinetID,
                        destinationlokalID,
                        destinationorgID,
                        destinationInventoryPeriod,
                        orgarcode,
                        username,
                        type,
                        database,
                        takeInventory,
                        lokaldb
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TransferArticleAsync(
                    double KpinvtransID,
                    double KpinventoryID,
                    double DestinationCabinetID,
                    double destinationlokalID,
                    double destinationorgID,
                    double destinationInventoryPeriod,
                    double orgarcode,
                    string username,
                    double type,
                    string database,
                    bool takeInventory,
                    string lokaldb
                    )
        {
            this.TransferArticleAsync(KpinvtransID, KpinventoryID, DestinationCabinetID, destinationlokalID, destinationorgID, destinationInventoryPeriod, orgarcode, username, type, database, takeInventory, lokaldb);
        }

        /// <remarks/>
        public void TransferArticleAsync(
                    double KpinvtransID,
                    double KpinventoryID,
                    double DestinationCabinetID,
                    double destinationlokalID,
                    double destinationorgID,
                    double destinationInventoryPeriod,
                    double orgarcode,
                    string username,
                    double type,
                    string database,
                    bool takeInventory,
                    string lokaldb,
                    object userState)
        {
            if ((this.TransferArticleOperationCompleted == null))
            {
                this.TransferArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferArticleOperationCompleted);
            }
            this.InvokeAsync("TransferArticle", new object[] {
                        KpinvtransID,
                        KpinventoryID,
                        DestinationCabinetID,
                        destinationlokalID,
                        destinationorgID,
                        destinationInventoryPeriod,
                        orgarcode,
                        username,
                        type,
                        database,
                        takeInventory,
                        lokaldb
                        }, this.TransferArticleOperationCompleted, userState);
        }

        private void OnTransferArticleOperationCompleted(object arg)
        {
            if ((this.TransferArticleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferArticleCompleted(this, new TransferArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetLoginBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string GetLoginBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, double userid)
        {
            object[] results = this.Invoke("GetLoginBarcode", new object[] {
                        databas,
                        userid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLoginBarcodeAsync(string databas, double userid)
        {
            this.GetLoginBarcodeAsync(databas, userid);
        }

        /// <remarks/>
        public void GetLoginBarcodeAsync(string databas, double userid, object userState)
        {
            if ((this.GetLoginBarcodeOperationCompleted == null))
            {
                this.GetLoginBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginBarcodeOperationCompleted);
            }
            this.InvokeAsync("GetLoginBarcode", new object[] {
                        databas,
                        userid
                        }, this.GetLoginBarcodeOperationCompleted, userState);
        }

        private void OnGetLoginBarcodeOperationCompleted(object arg)
        {
            if ((this.GetLoginBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginBarcodeCompleted(this, new GetLoginBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CheckOutKpinvTrans", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string CheckOutKpinvTrans([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string urspdb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string streckkod, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, double mangd)
        {
            object[] results = this.Invoke("CheckOutKpinvTrans", new object[] {
                        kemiDb,
                        urspdb,
                        streckkod,
                        username,
                        mangd
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckOutKpinvTransAsync(string kemiDb, string urspdb, string streckkod, string username, double mangd)
        {
            this.CheckOutKpinvTransAsync(kemiDb, urspdb, streckkod, username, mangd);
        }

        /// <remarks/>
        public void CheckOutKpinvTransAsync(string kemiDb, string urspdb, string streckkod, string username, double mangd, object userState)
        {
            if ((this.CheckOutKpinvTransOperationCompleted == null))
            {
                this.CheckOutKpinvTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutKpinvTransOperationCompleted);
            }
            this.InvokeAsync("CheckOutKpinvTrans", new object[] {
                        kemiDb,
                        urspdb,
                        streckkod,
                        username,
                        mangd
                        }, this.CheckOutKpinvTransOperationCompleted, userState);
        }

        private void OnCheckOutKpinvTransOperationCompleted(object arg)
        {
            if ((this.CheckOutKpinvTransCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutKpinvTransCompleted(this, new CheckOutKpinvTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AssignBarcode", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string AssignBarcode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string databas, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string LokalDB, double transid, double verkid, double userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string username, double produktID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string mangd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string enhet)
        {
            object[] results = this.Invoke("AssignBarcode", new object[] {
                        databas,
                        LokalDB,
                        transid,
                        verkid,
                        userid,
                        username,
                        produktID,
                        mangd,
                        enhet});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AssignBarcodeAsync(string databas, string LokalDB, double transid, double verkid, double userid, string username, double produktID, string mangd, string enhet)
        {
            this.AssignBarcodeAsync(databas, LokalDB, transid, verkid, userid, username, produktID, mangd, enhet);
        }

        /// <remarks/>
        public void AssignBarcodeAsync(string databas, string LokalDB, double transid, double verkid, double userid, string username, double produktID, string mangd, string enhet, object userState)
        {
            if ((this.AssignBarcodeOperationCompleted == null))
            {
                this.AssignBarcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignBarcodeOperationCompleted);
            }
            this.InvokeAsync("AssignBarcode", new object[] {
                        databas,
                        LokalDB,
                        transid,
                        verkid,
                        userid,
                        username,
                        produktID,
                        mangd,
                        enhet}, this.AssignBarcodeOperationCompleted, userState);
        }

        private void OnAssignBarcodeOperationCompleted(object arg)
        {
            if ((this.AssignBarcodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignBarcodeCompleted(this, new AssignBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:SokProd", RequestNamespace = "http://ws.cfport", ResponseNamespace = "http://ws.cfport", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable = true)]
        public string SokProd([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sokbeg, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string kemiDb, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string database, double verkid)
        {
            object[] results = this.Invoke("SokProd", new object[] {
                        sokbeg,
                        kemiDb,
                        database,
                        verkid
                        });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SokProdAsync(string sokbeg, string kemiDb, string database, double verkid)
        {
            this.SokProdAsync(sokbeg, kemiDb, database, verkid);
        }

        /// <remarks/>
        public void SokProdAsync(string sokbeg, string kemiDb, string database, double verkid, object userState)
        {
            if ((this.SokProdOperationCompleted == null))
            {
                this.SokProdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSokProdOperationCompleted);
            }
            this.InvokeAsync("SokProd", new object[] {
                        sokbeg,
                        kemiDb,
                        database,
                        verkid
                        }, this.SokProdOperationCompleted, userState);
        }

        private void OnSokProdOperationCompleted(object arg)
        {
            if ((this.SokProdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SokProdCompleted(this, new SokProdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgtradForInventoryCompletedEventHandler(object sender, GetOrgtradForInventoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgtradForInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgtradForInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BarcodeLoginCompletedEventHandler(object sender, BarcodeLoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarcodeLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BarcodeLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckInKpinventoryCompletedEventHandler(object sender, CheckInKpinventoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInKpinventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckInKpinventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPropNameStringCompletedEventHandler(object sender, GetPropNameStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropNameStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropNameStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetQualityCompletedEventHandler(object sender, GetQualityCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQualityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQualityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInventoryOrgStatusCompletedEventHandler(object sender, GetInventoryOrgStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryOrgStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInventoryOrgStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SaveNewCommentCompletedEventHandler(object sender, SaveNewCommentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveNewCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLocationWithBarcodeCompletedEventHandler(object sender, GetLocationWithBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationWithBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLocationWithBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgarIDCompletedEventHandler(object sender, GetOrgarIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgarIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgarIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRoomsCompletedEventHandler(object sender, GetRoomsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoomsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRoomsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckDuplicateCompletedEventHandler(object sender, CheckDuplicateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDuplicateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckDuplicateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckLoggCompletedEventHandler(object sender, CheckLoggCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoggCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckLoggCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetBerFlaggCompletedEventHandler(object sender, SetBerFlaggCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBerFlaggCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetBerFlaggCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLocationBarcodeCompletedEventHandler(object sender, GetLocationBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLocationBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TakeInventoryCompletedEventHandler(object sender, TakeInventoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TakeInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TakeInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetReleaseProductsCompletedEventHandler(object sender, GetReleaseProductsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleaseProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReleaseProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRoom_CabinetCompletedEventHandler(object sender, GetRoom_CabinetCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoom_CabinetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRoom_CabinetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProdProperties2CompletedEventHandler(object sender, GetProdProperties2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProdProperties2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetProdProperties2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckOutAQBarCodeCompletedEventHandler(object sender, CheckOutAQBarCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutAQBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckOutAQBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FindProductCompletedEventHandler(object sender, FindProductCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FindProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInvtransIDCompletedEventHandler(object sender, GetInvtransIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvtransIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInvtransIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArCompletedEventHandler(object sender, GetArCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetArCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPropertiesCompletedEventHandler(object sender, GetPropertiesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckLocationBarcodeCompletedEventHandler(object sender, CheckLocationBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLocationBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckLocationBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateKpinvtransCompletedEventHandler(object sender, UpdateKpinvtransCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateKpinvtransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateKpinvtransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetParentsCompletedEventHandler(object sender, GetParentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetParentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStorageParentCompletedEventHandler(object sender, GetStorageParentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStorageParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertArticleCompletedEventHandler(object sender, InsertArticleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrderListCompletedEventHandler(object sender, GetOrderListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckInAQBarCodeCompletedEventHandler(object sender, CheckInAQBarCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInAQBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckInAQBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStorageCompletedEventHandler(object sender, GetStorageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllProductsCompletedEventHandler(object sender, GetAllProductsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPropertyNameCompletedEventHandler(object sender, GetPropertyNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropertyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInventoryListCompletedEventHandler(object sender, GetInventoryListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInventoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserOrgnodCompletedEventHandler(object sender, GetUserOrgnodCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserOrgnodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserOrgnodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProductPropertyNameCompletedEventHandler(object sender, GetProductPropertyNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductPropertyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetProductPropertyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgtradCompletedEventHandler(object sender, GetOrgtradCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgtradCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgtradCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetNotStartedOrgCompletedEventHandler(object sender, GetNotStartedOrgCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNotStartedOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetNotStartedOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NOT_KpinvtransCompletedEventHandler(object sender, NOT_KpinvtransCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NOT_KpinvtransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NOT_KpinvtransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgarCodeCompletedEventHandler(object sender, GetOrgarCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProdSupplierTextCompletedEventHandler(object sender, GetProdSupplierTextCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProdSupplierTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetProdSupplierTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInventoryStatusCompletedEventHandler(object sender, GetInventoryStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInventoryStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPropIDCompletedEventHandler(object sender, GetPropIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgarCompletedEventHandler(object sender, GetOrgarCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrgnamnCompletedEventHandler(object sender, GetOrgnamnCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgnamnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgnamnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OrderCheckOutCompletedEventHandler(object sender, OrderCheckOutCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderCheckOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OrderCheckOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInfoCompletedEventHandler(object sender, GetInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStorageParentCheckCompletedEventHandler(object sender, GetStorageParentCheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageParentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStorageParentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPrintingListCompletedEventHandler(object sender, GetPrintingListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrintingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPrintingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReleaseRulesCompletedEventHandler(object sender, ReleaseRulesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ReleaseRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProdSupplierCompletedEventHandler(object sender, GetProdSupplierCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProdSupplierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetProdSupplierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckIfBarcodeExistsCompletedEventHandler(object sender, CheckIfBarcodeExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfBarcodeExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckIfBarcodeExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPrintBFCompletedEventHandler(object sender, GetPrintBFCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrintBFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPrintBFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FinnsProdCompletedEventHandler(object sender, FinnsProdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinnsProdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FinnsProdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertProdSupplierCompletedEventHandler(object sender, InsertProdSupplierCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertProdSupplierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InsertProdSupplierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCheckedInProdCompletedEventHandler(object sender, GetCheckedInProdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckedInProdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCheckedInProdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDBsCompletedEventHandler(object sender, GetDBsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDBsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckIfOrangeCompletedEventHandler(object sender, CheckIfOrangeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfOrangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckIfOrangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStorageNameCompletedEventHandler(object sender, GetStorageNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStorageNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetNewVersionCompletedEventHandler(object sender, GetNewVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetNewVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRoomPropCompletedEventHandler(object sender, GetRoomPropCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoomPropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRoomPropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetInventoryCabinetsCompletedEventHandler(object sender, GetInventoryCabinetsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInventoryCabinetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInventoryCabinetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserNameAndPasswordWithBarcodeCompletedEventHandler(object sender, GetUserNameAndPasswordWithBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameAndPasswordWithBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserNameAndPasswordWithBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPcAppInstCompletedEventHandler(object sender, GetPcAppInstCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPcAppInstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPcAppInstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MoveToPapperskorgCompletedEventHandler(object sender, MoveToPapperskorgCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveToPapperskorgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MoveToPapperskorgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStorageNameOverviewCompletedEventHandler(object sender, GetStorageNameOverviewCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStorageNameOverviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetStorageNameOverviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SaveLoginBarcodeCompletedEventHandler(object sender, SaveLoginBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveLoginBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveLoginBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPropNameCompletedEventHandler(object sender, GetPropNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ProductPropertyCompletedEventHandler(object sender, ProductPropertyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProductPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCountriesCompletedEventHandler(object sender, GetCountriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvdCompletedEventHandler(object sender, GetAvdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAvdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUnitCompletedEventHandler(object sender, GetUnitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateKpinvStatusCompletedEventHandler(object sender, UpdateKpinvStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateKpinvStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateKpinvStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AvanceradNivaCompletedEventHandler(object sender, AvanceradNivaCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AvanceradNivaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AvanceradNivaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LokFastCompletedEventHandler(object sender, LokFastCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LokFastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LokFastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void OrderDeleterowCompletedEventHandler(object sender, OrderDeleterowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderDeleterowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OrderDeleterowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FinnsMolstruktCompletedEventHandler(object sender, FinnsMolstruktCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinnsMolstruktCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FinnsMolstruktCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NollstallAvdCompletedEventHandler(object sender, NollstallAvdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NollstallAvdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NollstallAvdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOrderCompletedEventHandler(object sender, GetOrderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetArtNrCompletedEventHandler(object sender, GetArtNrCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArtNrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetArtNrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ImportLandRegelCompletedEventHandler(object sender, ImportLandRegelCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportLandRegelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportLandRegelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TransferArticleCompletedEventHandler(object sender, TransferArticleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLoginBarcodeCompletedEventHandler(object sender, GetLoginBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLoginBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckOutKpinvTransCompletedEventHandler(object sender, CheckOutKpinvTransCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutKpinvTransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckOutKpinvTransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double @return
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool returnSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AssignBarcodeCompletedEventHandler(object sender, AssignBarcodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignBarcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AssignBarcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SokProdCompletedEventHandler(object sender, SokProdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SokProdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SokProdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591